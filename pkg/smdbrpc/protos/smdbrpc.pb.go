// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: smdbrpc/protos/smdbrpc.proto

package execinfrapb

/*
	package cockroach.sql.distsqlrun;
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HLCTimestamp struct {
	Walltime    *int64 `protobuf:"varint,1,opt,name=walltime" json:"walltime,omitempty"`
	Logicaltime *int64 `protobuf:"varint,2,opt,name=logicaltime" json:"logicaltime,omitempty"`
}

func (m *HLCTimestamp) Reset()         { *m = HLCTimestamp{} }
func (m *HLCTimestamp) String() string { return proto.CompactTextString(m) }
func (*HLCTimestamp) ProtoMessage()    {}
func (*HLCTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_e2d281b1b26c79f4, []int{0}
}
func (m *HLCTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HLCTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *HLCTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HLCTimestamp.Merge(dst, src)
}
func (m *HLCTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *HLCTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_HLCTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_HLCTimestamp proto.InternalMessageInfo

type HotshardRequest struct {
	Sqlstring    *string       `protobuf:"bytes,1,opt,name=sqlstring" json:"sqlstring,omitempty"`
	Hlctimestamp *HLCTimestamp `protobuf:"bytes,2,opt,name=hlctimestamp" json:"hlctimestamp,omitempty"`
}

func (m *HotshardRequest) Reset()         { *m = HotshardRequest{} }
func (m *HotshardRequest) String() string { return proto.CompactTextString(m) }
func (*HotshardRequest) ProtoMessage()    {}
func (*HotshardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_e2d281b1b26c79f4, []int{1}
}
func (m *HotshardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotshardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *HotshardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotshardRequest.Merge(dst, src)
}
func (m *HotshardRequest) XXX_Size() int {
	return m.Size()
}
func (m *HotshardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HotshardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HotshardRequest proto.InternalMessageInfo

// The response message containing the greetings
type HotshardReply struct {
	IsCommitted  *bool         `protobuf:"varint,1,opt,name=is_committed,json=isCommitted" json:"is_committed,omitempty"`
	Hlctimestamp *HLCTimestamp `protobuf:"bytes,2,opt,name=hlctimestamp" json:"hlctimestamp,omitempty"`
}

func (m *HotshardReply) Reset()         { *m = HotshardReply{} }
func (m *HotshardReply) String() string { return proto.CompactTextString(m) }
func (*HotshardReply) ProtoMessage()    {}
func (*HotshardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_e2d281b1b26c79f4, []int{2}
}
func (m *HotshardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotshardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *HotshardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotshardReply.Merge(dst, src)
}
func (m *HotshardReply) XXX_Size() int {
	return m.Size()
}
func (m *HotshardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HotshardReply.DiscardUnknown(m)
}

var xxx_messageInfo_HotshardReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HLCTimestamp)(nil), "smdbrpc.HLCTimestamp")
	proto.RegisterType((*HotshardRequest)(nil), "smdbrpc.HotshardRequest")
	proto.RegisterType((*HotshardReply)(nil), "smdbrpc.HotshardReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HotshardGatewayClient is the client API for HotshardGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HotshardGatewayClient interface {
	// Sends a greeting
	ContactHotshard(ctx context.Context, in *HotshardRequest, opts ...grpc.CallOption) (*HotshardReply, error)
}

type hotshardGatewayClient struct {
	cc *grpc.ClientConn
}

func NewHotshardGatewayClient(cc *grpc.ClientConn) HotshardGatewayClient {
	return &hotshardGatewayClient{cc}
}

func (c *hotshardGatewayClient) ContactHotshard(ctx context.Context, in *HotshardRequest, opts ...grpc.CallOption) (*HotshardReply, error) {
	out := new(HotshardReply)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/ContactHotshard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotshardGatewayServer is the server API for HotshardGateway service.
type HotshardGatewayServer interface {
	// Sends a greeting
	ContactHotshard(context.Context, *HotshardRequest) (*HotshardReply, error)
}

func RegisterHotshardGatewayServer(s *grpc.Server, srv HotshardGatewayServer) {
	s.RegisterService(&_HotshardGateway_serviceDesc, srv)
}

func _HotshardGateway_ContactHotshard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotshardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).ContactHotshard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/ContactHotshard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).ContactHotshard(ctx, req.(*HotshardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HotshardGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smdbrpc.HotshardGateway",
	HandlerType: (*HotshardGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContactHotshard",
			Handler:    _HotshardGateway_ContactHotshard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smdbrpc/protos/smdbrpc.proto",
}

func (m *HLCTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HLCTimestamp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Walltime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Walltime))
	}
	if m.Logicaltime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Logicaltime))
	}
	return i, nil
}

func (m *HotshardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotshardRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sqlstring != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(*m.Sqlstring)))
		i += copy(dAtA[i:], *m.Sqlstring)
	}
	if m.Hlctimestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Hlctimestamp.Size()))
		n1, err := m.Hlctimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *HotshardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotshardReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsCommitted != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsCommitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Hlctimestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Hlctimestamp.Size()))
		n2, err := m.Hlctimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintSmdbrpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HLCTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Walltime != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Walltime))
	}
	if m.Logicaltime != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Logicaltime))
	}
	return n
}

func (m *HotshardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sqlstring != nil {
		l = len(*m.Sqlstring)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Hlctimestamp != nil {
		l = m.Hlctimestamp.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func (m *HotshardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsCommitted != nil {
		n += 2
	}
	if m.Hlctimestamp != nil {
		l = m.Hlctimestamp.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func sovSmdbrpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSmdbrpc(x uint64) (n int) {
	return sovSmdbrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HLCTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HLCTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HLCTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Walltime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Walltime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logicaltime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Logicaltime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotshardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotshardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotshardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sqlstring", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sqlstring = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hlctimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hlctimestamp == nil {
				m.Hlctimestamp = &HLCTimestamp{}
			}
			if err := m.Hlctimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotshardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotshardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotshardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCommitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCommitted = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hlctimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hlctimestamp == nil {
				m.Hlctimestamp = &HLCTimestamp{}
			}
			if err := m.Hlctimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSmdbrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSmdbrpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSmdbrpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSmdbrpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSmdbrpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSmdbrpc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("smdbrpc/protos/smdbrpc.proto", fileDescriptor_smdbrpc_e2d281b1b26c79f4)
}

var fileDescriptor_smdbrpc_e2d281b1b26c79f4 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0x63, 0x18, 0x68, 0x9d, 0xa0, 0x4a, 0x96, 0x40, 0x55, 0x55, 0x59, 0x25, 0x13, 0x0b,
	0xad, 0xd4, 0x8d, 0x95, 0x08, 0xd1, 0xa1, 0x53, 0xc4, 0x80, 0x58, 0x90, 0xeb, 0x98, 0xd6, 0xc8,
	0x8e, 0xdd, 0xf8, 0x47, 0x25, 0x6f, 0xc1, 0x63, 0x75, 0xec, 0xd8, 0x11, 0x92, 0x17, 0x41, 0x0a,
	0x0d, 0x69, 0x25, 0xb6, 0x8e, 0x77, 0x67, 0xdd, 0x77, 0xfe, 0x71, 0xdf, 0xe9, 0x64, 0x96, 0x59,
	0x3e, 0xb2, 0x99, 0x01, 0xe3, 0x46, 0x3b, 0x39, 0xac, 0x24, 0x39, 0xdb, 0xc9, 0x70, 0x8a, 0x83,
	0xc9, 0x34, 0x7a, 0x94, 0x5a, 0x38, 0x60, 0xda, 0x92, 0x1e, 0x6e, 0xad, 0x98, 0x52, 0x20, 0xb5,
	0xe8, 0xa2, 0x01, 0xba, 0x3e, 0x8d, 0xff, 0x34, 0x19, 0x60, 0x5f, 0x99, 0xb9, 0xe4, 0xec, 0x37,
	0x3e, 0xa9, 0xe2, 0x7d, 0x2b, 0x7c, 0xc3, 0x9d, 0x89, 0x01, 0xb7, 0x60, 0x59, 0x12, 0x8b, 0xe5,
	0xbb, 0x70, 0x40, 0xfa, 0xb8, 0xed, 0x96, 0xca, 0x41, 0x26, 0xd3, 0x79, 0xd5, 0xd8, 0x8e, 0x1b,
	0x83, 0xdc, 0xe2, 0x60, 0xa1, 0x38, 0xd4, 0xf8, 0xaa, 0xd3, 0x1f, 0x5f, 0x0c, 0xeb, 0xb5, 0xfb,
	0xdb, 0xe2, 0x83, 0xa7, 0xa1, 0xc6, 0xe7, 0x0d, 0xcb, 0xaa, 0x9c, 0x5c, 0xe1, 0x40, 0xba, 0x17,
	0x6e, 0xb4, 0x96, 0x00, 0x22, 0xa9, 0x60, 0xad, 0xd8, 0x97, 0x2e, 0xaa, 0xad, 0x23, 0x70, 0xe3,
	0xa7, 0xe6, 0x6b, 0x0f, 0x0c, 0xc4, 0x8a, 0xe5, 0xe4, 0x1e, 0x77, 0x22, 0x93, 0x02, 0xe3, 0x50,
	0x27, 0xa4, 0xdb, 0x54, 0x1d, 0xde, 0xa1, 0x77, 0xf9, 0x4f, 0x62, 0x55, 0x1e, 0x7a, 0x77, 0x37,
	0xeb, 0x6f, 0xea, 0xad, 0x0b, 0x8a, 0x36, 0x05, 0x45, 0xdb, 0x82, 0xa2, 0xaf, 0x82, 0xa2, 0xcf,
	0x92, 0x7a, 0x9b, 0x92, 0x7a, 0xdb, 0x92, 0x7a, 0xcf, 0xbe, 0xf8, 0x10, 0x5c, 0xa6, 0xaf, 0x19,
	0xb3, 0xb3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x79, 0x09, 0x35, 0xd9, 0x01, 0x00, 0x00,
}
