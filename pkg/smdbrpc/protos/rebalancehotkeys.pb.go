// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: smdbrpc/protos/rebalancehotkeys.proto

package execinfrapb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KeyStat struct {
	Key      *uint64 `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Qps      *uint64 `protobuf:"varint,2,opt,name=qps" json:"qps,omitempty"`
	WriteQps *uint64 `protobuf:"varint,3,opt,name=writeQps" json:"writeQps,omitempty"`
}

func (m *KeyStat) Reset()         { *m = KeyStat{} }
func (m *KeyStat) String() string { return proto.CompactTextString(m) }
func (*KeyStat) ProtoMessage()    {}
func (*KeyStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_rebalancehotkeys_20f00dca1c5ca56f, []int{0}
}
func (m *KeyStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *KeyStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyStat.Merge(dst, src)
}
func (m *KeyStat) XXX_Size() int {
	return m.Size()
}
func (m *KeyStat) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyStat.DiscardUnknown(m)
}

var xxx_messageInfo_KeyStat proto.InternalMessageInfo

type KeyStatsRequest struct {
	Placeholder *bool `protobuf:"varint,1,opt,name=placeholder" json:"placeholder,omitempty"`
}

func (m *KeyStatsRequest) Reset()         { *m = KeyStatsRequest{} }
func (m *KeyStatsRequest) String() string { return proto.CompactTextString(m) }
func (*KeyStatsRequest) ProtoMessage()    {}
func (*KeyStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rebalancehotkeys_20f00dca1c5ca56f, []int{1}
}
func (m *KeyStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *KeyStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyStatsRequest.Merge(dst, src)
}
func (m *KeyStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyStatsRequest proto.InternalMessageInfo

type CRDBKeyStatsResponse struct {
	Keystats []*KeyStat `protobuf:"bytes,1,rep,name=keystats" json:"keystats,omitempty"`
}

func (m *CRDBKeyStatsResponse) Reset()         { *m = CRDBKeyStatsResponse{} }
func (m *CRDBKeyStatsResponse) String() string { return proto.CompactTextString(m) }
func (*CRDBKeyStatsResponse) ProtoMessage()    {}
func (*CRDBKeyStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rebalancehotkeys_20f00dca1c5ca56f, []int{2}
}
func (m *CRDBKeyStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CRDBKeyStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CRDBKeyStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CRDBKeyStatsResponse.Merge(dst, src)
}
func (m *CRDBKeyStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CRDBKeyStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CRDBKeyStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CRDBKeyStatsResponse proto.InternalMessageInfo

type CicadaStatsResponse struct {
	Keystats []*KeyStat `protobuf:"bytes,1,rep,name=keystats" json:"keystats,omitempty"`
	Cpuusage *uint64    `protobuf:"varint,2,opt,name=cpuusage" json:"cpuusage,omitempty"`
	Memusage *uint64    `protobuf:"varint,3,opt,name=memusage" json:"memusage,omitempty"`
}

func (m *CicadaStatsResponse) Reset()         { *m = CicadaStatsResponse{} }
func (m *CicadaStatsResponse) String() string { return proto.CompactTextString(m) }
func (*CicadaStatsResponse) ProtoMessage()    {}
func (*CicadaStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rebalancehotkeys_20f00dca1c5ca56f, []int{3}
}
func (m *CicadaStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CicadaStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CicadaStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CicadaStatsResponse.Merge(dst, src)
}
func (m *CicadaStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CicadaStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CicadaStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CicadaStatsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*KeyStat)(nil), "smdbrpc.KeyStat")
	proto.RegisterType((*KeyStatsRequest)(nil), "smdbrpc.KeyStatsRequest")
	proto.RegisterType((*CRDBKeyStatsResponse)(nil), "smdbrpc.CRDBKeyStatsResponse")
	proto.RegisterType((*CicadaStatsResponse)(nil), "smdbrpc.CicadaStatsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RebalanceHotkeysGatewayClient is the client API for RebalanceHotkeysGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RebalanceHotkeysGatewayClient interface {
	RequestCRDBKeyStats(ctx context.Context, in *KeyStatsRequest, opts ...grpc.CallOption) (*CRDBKeyStatsResponse, error)
	RequestCicadaStats(ctx context.Context, in *KeyStatsRequest, opts ...grpc.CallOption) (*CicadaStatsResponse, error)
}

type rebalanceHotkeysGatewayClient struct {
	cc *grpc.ClientConn
}

func NewRebalanceHotkeysGatewayClient(cc *grpc.ClientConn) RebalanceHotkeysGatewayClient {
	return &rebalanceHotkeysGatewayClient{cc}
}

func (c *rebalanceHotkeysGatewayClient) RequestCRDBKeyStats(ctx context.Context, in *KeyStatsRequest, opts ...grpc.CallOption) (*CRDBKeyStatsResponse, error) {
	out := new(CRDBKeyStatsResponse)
	err := c.cc.Invoke(ctx, "/smdbrpc.RebalanceHotkeysGateway/RequestCRDBKeyStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rebalanceHotkeysGatewayClient) RequestCicadaStats(ctx context.Context, in *KeyStatsRequest, opts ...grpc.CallOption) (*CicadaStatsResponse, error) {
	out := new(CicadaStatsResponse)
	err := c.cc.Invoke(ctx, "/smdbrpc.RebalanceHotkeysGateway/RequestCicadaStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RebalanceHotkeysGatewayServer is the server API for RebalanceHotkeysGateway service.
type RebalanceHotkeysGatewayServer interface {
	RequestCRDBKeyStats(context.Context, *KeyStatsRequest) (*CRDBKeyStatsResponse, error)
	RequestCicadaStats(context.Context, *KeyStatsRequest) (*CicadaStatsResponse, error)
}

func RegisterRebalanceHotkeysGatewayServer(s *grpc.Server, srv RebalanceHotkeysGatewayServer) {
	s.RegisterService(&_RebalanceHotkeysGateway_serviceDesc, srv)
}

func _RebalanceHotkeysGateway_RequestCRDBKeyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebalanceHotkeysGatewayServer).RequestCRDBKeyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.RebalanceHotkeysGateway/RequestCRDBKeyStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebalanceHotkeysGatewayServer).RequestCRDBKeyStats(ctx, req.(*KeyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RebalanceHotkeysGateway_RequestCicadaStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebalanceHotkeysGatewayServer).RequestCicadaStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.RebalanceHotkeysGateway/RequestCicadaStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebalanceHotkeysGatewayServer).RequestCicadaStats(ctx, req.(*KeyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RebalanceHotkeysGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smdbrpc.RebalanceHotkeysGateway",
	HandlerType: (*RebalanceHotkeysGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestCRDBKeyStats",
			Handler:    _RebalanceHotkeysGateway_RequestCRDBKeyStats_Handler,
		},
		{
			MethodName: "RequestCicadaStats",
			Handler:    _RebalanceHotkeysGateway_RequestCicadaStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smdbrpc/protos/rebalancehotkeys.proto",
}

func (m *KeyStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyStat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRebalancehotkeys(dAtA, i, uint64(*m.Key))
	}
	if m.Qps != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRebalancehotkeys(dAtA, i, uint64(*m.Qps))
	}
	if m.WriteQps != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRebalancehotkeys(dAtA, i, uint64(*m.WriteQps))
	}
	return i, nil
}

func (m *KeyStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Placeholder != nil {
		dAtA[i] = 0x8
		i++
		if *m.Placeholder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CRDBKeyStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CRDBKeyStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keystats) > 0 {
		for _, msg := range m.Keystats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRebalancehotkeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CicadaStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CicadaStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keystats) > 0 {
		for _, msg := range m.Keystats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRebalancehotkeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Cpuusage != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRebalancehotkeys(dAtA, i, uint64(*m.Cpuusage))
	}
	if m.Memusage != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRebalancehotkeys(dAtA, i, uint64(*m.Memusage))
	}
	return i, nil
}

func encodeVarintRebalancehotkeys(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KeyStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += 1 + sovRebalancehotkeys(uint64(*m.Key))
	}
	if m.Qps != nil {
		n += 1 + sovRebalancehotkeys(uint64(*m.Qps))
	}
	if m.WriteQps != nil {
		n += 1 + sovRebalancehotkeys(uint64(*m.WriteQps))
	}
	return n
}

func (m *KeyStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Placeholder != nil {
		n += 2
	}
	return n
}

func (m *CRDBKeyStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keystats) > 0 {
		for _, e := range m.Keystats {
			l = e.Size()
			n += 1 + l + sovRebalancehotkeys(uint64(l))
		}
	}
	return n
}

func (m *CicadaStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keystats) > 0 {
		for _, e := range m.Keystats {
			l = e.Size()
			n += 1 + l + sovRebalancehotkeys(uint64(l))
		}
	}
	if m.Cpuusage != nil {
		n += 1 + sovRebalancehotkeys(uint64(*m.Cpuusage))
	}
	if m.Memusage != nil {
		n += 1 + sovRebalancehotkeys(uint64(*m.Memusage))
	}
	return n
}

func sovRebalancehotkeys(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRebalancehotkeys(x uint64) (n int) {
	return sovRebalancehotkeys(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRebalancehotkeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRebalancehotkeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Key = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRebalancehotkeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Qps = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteQps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRebalancehotkeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WriteQps = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRebalancehotkeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRebalancehotkeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRebalancehotkeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRebalancehotkeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Placeholder = &b
		default:
			iNdEx = preIndex
			skippy, err := skipRebalancehotkeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRebalancehotkeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CRDBKeyStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRebalancehotkeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CRDBKeyStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CRDBKeyStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keystats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRebalancehotkeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRebalancehotkeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keystats = append(m.Keystats, &KeyStat{})
			if err := m.Keystats[len(m.Keystats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRebalancehotkeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRebalancehotkeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CicadaStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRebalancehotkeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CicadaStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CicadaStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keystats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRebalancehotkeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRebalancehotkeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keystats = append(m.Keystats, &KeyStat{})
			if err := m.Keystats[len(m.Keystats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpuusage", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRebalancehotkeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cpuusage = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memusage", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRebalancehotkeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Memusage = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRebalancehotkeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRebalancehotkeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRebalancehotkeys(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRebalancehotkeys
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRebalancehotkeys
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRebalancehotkeys
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRebalancehotkeys
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRebalancehotkeys
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRebalancehotkeys(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRebalancehotkeys = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRebalancehotkeys   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("smdbrpc/protos/rebalancehotkeys.proto", fileDescriptor_rebalancehotkeys_20f00dca1c5ca56f)
}

var fileDescriptor_rebalancehotkeys_20f00dca1c5ca56f = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0xcf, 0x4e, 0x32, 0x31,
	0x14, 0xc5, 0xa7, 0x1f, 0x5f, 0x02, 0xb9, 0x2c, 0x24, 0xc5, 0xc4, 0x09, 0xd1, 0x86, 0x4c, 0x62,
	0xc2, 0x42, 0x21, 0xc1, 0x37, 0x00, 0x12, 0x35, 0x26, 0x46, 0xeb, 0xce, 0x5d, 0x19, 0xae, 0x4a,
	0xf8, 0x33, 0xa5, 0x2d, 0xc1, 0x89, 0x2f, 0xe1, 0xfb, 0xf8, 0x02, 0x2c, 0x59, 0xb2, 0xd4, 0xe1,
	0x45, 0x4c, 0xa1, 0x33, 0x10, 0x35, 0x6e, 0xdc, 0xcd, 0x3d, 0xf7, 0xce, 0xe9, 0x39, 0x3f, 0x38,
	0xd6, 0xa3, 0x5e, 0x57, 0xc9, 0xb0, 0x21, 0x55, 0x64, 0x22, 0xdd, 0x50, 0xd8, 0x15, 0x43, 0x31,
	0x0e, 0xf1, 0x29, 0x32, 0x03, 0x8c, 0x75, 0x7d, 0xad, 0xd3, 0xbc, 0x3b, 0x0b, 0x2e, 0x21, 0x7f,
	0x85, 0xf1, 0x9d, 0x11, 0x86, 0x96, 0x20, 0x37, 0xc0, 0xd8, 0x27, 0x55, 0x52, 0xfb, 0xcf, 0xed,
	0xa7, 0x55, 0x26, 0x52, 0xfb, 0xff, 0x36, 0xca, 0x44, 0x6a, 0x5a, 0x81, 0xc2, 0x4c, 0xf5, 0x0d,
	0xde, 0x4a, 0xed, 0xe7, 0xd6, 0x72, 0x36, 0x07, 0x67, 0xb0, 0xe7, 0xac, 0x34, 0xc7, 0xc9, 0x14,
	0xb5, 0xa1, 0x55, 0x28, 0xca, 0xa1, 0xb0, 0x8f, 0x0f, 0x7b, 0xa8, 0xd6, 0xd6, 0x05, 0xbe, 0x2b,
	0x05, 0x1d, 0xd8, 0x6f, 0xf3, 0x4e, 0x6b, 0xfb, 0xa3, 0x96, 0xd1, 0x58, 0x23, 0x3d, 0x81, 0x82,
	0x8d, 0x6b, 0x35, 0x9f, 0x54, 0x73, 0xb5, 0x62, 0xb3, 0x54, 0x77, 0x99, 0xeb, 0xee, 0x98, 0x67,
	0x17, 0xc1, 0x0b, 0x94, 0xdb, 0xfd, 0x50, 0xf4, 0xc4, 0x1f, 0x4c, 0x6c, 0xb7, 0x50, 0x4e, 0xa7,
	0x5a, 0x3c, 0xa2, 0xab, 0x9c, 0xcd, 0x76, 0x37, 0xc2, 0xd1, 0x66, 0xe7, 0x7a, 0xa7, 0x73, 0xf3,
	0x8d, 0xc0, 0x01, 0x4f, 0x31, 0x5f, 0x6c, 0x30, 0x9f, 0x0b, 0x83, 0x33, 0x11, 0xd3, 0x1b, 0x28,
	0x3b, 0x16, 0xbb, 0x2d, 0xa9, 0xff, 0x35, 0x46, 0x4a, 0xac, 0x72, 0x94, 0x6d, 0x7e, 0xc2, 0x12,
	0x78, 0xf4, 0x1a, 0x68, 0xea, 0xb8, 0x6d, 0xfc, 0x8b, 0xe1, 0xe1, 0xd6, 0xf0, 0x3b, 0xa1, 0xc0,
	0x6b, 0x9d, 0xce, 0x3f, 0x98, 0x37, 0x4f, 0x18, 0x59, 0x24, 0x8c, 0x2c, 0x13, 0x46, 0xde, 0x13,
	0x46, 0x5e, 0x57, 0xcc, 0x5b, 0xac, 0x98, 0xb7, 0x5c, 0x31, 0xef, 0xbe, 0x88, 0xcf, 0x18, 0xf6,
	0xc7, 0x0f, 0x4a, 0xc8, 0xee, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xa4, 0x84, 0xe3, 0x60,
	0x02, 0x00, 0x00,
}
