// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

// option java_multiple_files = true;
// option java_package = "io.grpc.examples.helloworld";
// option java_outer_classname = "HelloWorldProto";
// option objc_class_prefix = "HLW";
option go_package = "execinfrapb";

//package cockroach.sql.distsqlrun;
package smdbrpc;

//import "gogoproto/gogo.proto";

//message HLCTimestamp {
//  optional int64 walltime = 1 [(gogoproto.nullable) = false]; // the 64 bit timestampe value
//  optional int64 logicaltime = 2 [(gogoproto.nullable) = false]; // the causality counter
//}

message HLCTimestamp {
  required int64 walltime = 1; // the 64 bit timestamp value
  required int32 logicaltime = 2; // the causality counter
}

message KVPair {
  optional bytes key = 1;
  optional bytes value = 2;
  optional int64 walltime = 3;
  optional int32 logicaltime = 4;
  optional bytes isZero = 5; // ffttf, t=true, f=false
  optional string tableName = 6;
}

// The greeting service definition.
service HotshardGateway {
  // Sends a greeting

  rpc BatchSendTxns (BatchSendTxnsReq) returns (BatchSendTxnsResp) {}
  // Asks Cicada whether it will 1) only demote keys, 2) only request CRDB promotions,
  // or 3) ask CRDB to trigger demotions and promotions
  rpc CalculateCicadaStats (CalculateCicadaReq) returns (CalculateCicadaStatsResp) {}

  // a txn to the hotshard
  rpc ContactHotshard (HotshardRequest) returns (HotshardReply) {}

  // (singular) Demotes a key from Cicada to CRDB
  // (multiple) Demotes multiple keys from Cicada to CRDB (this essentially calls
  // DemoteKey, but the asynchronous batching is handled on Cicada's side
  rpc DemoteKey (KeyMigrationReq) returns (KeyMigrationResp) {}
  rpc DemoteKeys (MultiKeyMigrationReq) returns (MultiKeyMigrationResp) {}

  rpc DeleteFromInProgressDemotionMap (DeleteFromInProgressDemotionMapReq) returns (DeleteFromInProgressDemotionMapResp) {}
  rpc DeleteFromPromotionMap (DeleteFromPromotionMapReq) returns (DeleteFromPromotionMapResp) {}
  rpc LockPromotionMap (LockPromotionMapReq) returns (LockPromotionMapResp) {}
  rpc PopulateCRDBTableNumMapping (PopulateCRDBTableNumMappingReq) returns (PopulateCRDBTableNumMappingResp) {}
  rpc PromoteKey (KeyMigrationReq) returns (KeyMigrationResp) {}
  rpc PromoteKeys (PromoteKeysReq) returns (PromoteKeysResp) {}
  rpc PromoteKeysToCicada(PromoteKeysToCicadaReq) returns (PromoteKeysToCicadaResp) {}
  rpc QueryTableNumFromName(QueryTableNumFromNameReq) returns
    (QueryTableNumFromNameResp) {}
  rpc UnlockPromotionMap (UnlockPromotionMapReq) returns
    (UnlockPromotionMapResp) {}
  rpc UpdatePromotionMap (PromoteKeysReq) returns (PromoteKeysResp) {}
  rpc UpdatePromotionMapWithoutLocking (PromoteKeysReq) returns
    (PromoteKeysResp) {}
  rpc UpdateInProgressDemotionMap (UpdateInProgressDemotionMapReq) returns (UpdateInProgressDemotionMapResp) {}

  rpc RequestCRDBKeyStats(KeyStatsRequest) returns (CRDBKeyStatsResponse) {}
  rpc SendTxn(TxnReq) returns (TxnResp) {}
  rpc TriggerDemotionByNums (TriggerDemotionByNumsReq) returns (TriggerDemotionByNumsResp) {}
  rpc TriggerDemotion (TriggerDemotionRequest) returns (TriggerDemotionReply) {}

  rpc TestAddKeyToPromotionMap (TestPromotionKeyReq) returns (TestPromotionKeyResp) {}
  rpc TestIsKeyInPromotionMap(TestPromotionKeyReq) returns (TestPromotionKeyResp) {}
  rpc TestPromoteTPCCTables(TestPromoteTPCCTablesReq) returns
    (TestPromoteTPCCTablesResp) {}
  rpc TestSendTxn(CRDBTxnReq) returns (CRDBTxnResp) {}
  rpc TestQueryTableMap(QueryTableMapReq) returns (QueryTableMapResp) {}

  rpc RequestCicadaStats (CalculateCicadaReq) returns (CicadaStatsResponse) {}

}

message BatchSendTxnsReq {
  repeated TxnReq txns = 1;
}

message BatchSendTxnsResp {
  repeated TxnResp txnResps = 1;
}

message CRDBTxnReq {
  repeated Op ops = 1;
  optional HLCTimestamp timestamp = 2;
}

message CRDBTxnResp {
  optional bool is_committed = 1;
  repeated KVPair responses = 2;
}

message TableNumMapping {
  required string tableName = 1;
  required int32 tableNum = 2;
}
message PopulateCRDBTableNumMappingReq {
  repeated TableNumMapping tableNumMappings = 1;
}

message PopulateCRDBTableNumMappingResp {
  required bool isPopulated = 1;
}

message QueryTableMapReq {
  required bool placeholder = 1;
}

message QueryTableNumFromNameReq {
  repeated string tableNames = 1;
}

message NameNumPair {
  required string name = 1;
  required int32 num = 2;
}

message QueryTableNumFromNameResp {
  repeated NameNumPair mapping = 1;
}

message QueryTableMapResp {
  repeated TableNumMapping tableNumMappings = 1;
}

message TestPromotionKeyReq {
  required bytes key = 1;
  required HLCTimestamp promotionTimestamp = 2;
  repeated int64 cicada_key_cols = 3;
}

message TestPromotionKeyResp {
  required bool isKeyIn = 1;
  repeated int64 cicada_key_cols = 2;
}

message TestPromoteTPCCTablesReq {
  required int64 num_warehouses = 1;
  required bool warehouse = 2;
  required bool district = 3;
  required bool customer = 4;
  required bool order = 5;
  required bool neworder = 6;
  required bool orderline = 7;
  required bool stock = 8;
  required bool item = 9;
  required bool history = 10;
}

message TestPromoteTPCCTablesResp{}

message DeleteFromPromotionMapReq {
  optional bytes key = 1;
}

message DeleteFromPromotionMapResp {
  optional bool deleted = 1;
}

message UpdateInProgressDemotionMapReq {
  optional string key = 1;
}

message UpdateInProgressDemotionMapResp {
  optional bool added = 1;
}

message UnlockPromotionMapReq {}

message UnlockPromotionMapResp {
  required bool successfullyUnlocked = 1;
}

message DeleteFromInProgressDemotionMapReq {
  optional string key = 1;
}

message DeleteFromInProgressDemotionMapResp {
  optional bool deleted = 1;
}

enum Cmd {
  GET = 0;
  SCAN = 1;
  PUT = 2;
}

message Key {
  optional int64 table = 1;
  optional int64 index = 2;
  repeated int64 cicada_key_cols = 3;
  optional bytes key = 4;
  optional HLCTimestamp timestamp = 5;
  optional bytes value = 6;
  repeated int64 crdb_key_cols = 7;
  optional string tableName = 8;
}

message Op {
  required Cmd cmd = 1;
  required int64 table = 2;
  required int64 index = 3;
  repeated int64 cicada_key_cols = 4;
  required bytes key = 5;
  optional bytes value = 6;
  repeated int64 crdb_key_cols = 7;
  required string tableName = 8;
}

message TxnReq {
  repeated Op ops = 1;
  required HLCTimestamp timestamp = 2;
  optional bool is_promotion = 3;
  optional bool is_test = 4;
  optional bool is_demoted_test_field = 5;
  optional int32 txn_id = 6;
}

message TxnResp {
  required bool is_committed = 1;
  repeated KVPair responses = 2;
  optional int32 txn_id = 3;
}

message CalculateCicadaReq {
  optional double cpu_target = 1;    // ideal % cpu usage
  optional double cpu_ceiling = 2;    // max allowable % cpu usage
  optional double cpu_floor = 3;    // min allowable % cpu usage
  optional double mem_target = 4;    // ideal mem usage
  optional double mem_ceiling = 5;    // max allowable mem usage
  optional double mem_floor = 6;    // min allowable mem usage
  optional double percentile_n = 7;  // the percentile of keys newly promoted keys have to beat
  optional HLCTimestamp timestamp = 8;
}

message CalculateCicadaStatsResp {
  optional bool demotion_only = 1;
  optional uint64 qps_avail_for_promotion = 2;
  optional uint64 num_keys_avail_for_promotion = 3;
  optional float qps_at_nth_percentile = 4;
  optional bool keys_exist = 5;
}

message CicadaStatsResponse {
  repeated KeyStat keystats = 1;
  optional uint64 cpuusage = 2;
  optional uint64 memusage = 3;
}

message CRDBKeyStatsResponse {
  repeated KeyStat keystats = 1;
}

message HotshardRequest {
  // optional string sqlstring = 1;
  optional HLCTimestamp hlctimestamp = 1;
  repeated KVPair write_keyset = 2;
  repeated uint64 read_keyset = 3;

}

// The response message containing the greetings
message HotshardReply {
  optional bool is_committed = 1;
  repeated KVPair read_valueset = 2;
  // optional HLCTimestamp hlctimestamp = 2;
}
message LockPromotionMapReq {}

message LockPromotionMapResp {
  required bool successfullyLocked = 1;
}

message KVVersion {
  optional bytes key = 1;
  optional bytes value = 2;
  optional HLCTimestamp timestamp = 3;
  optional uint64 hotness = 4;
  repeated int64 cicada_key_cols = 5;
  optional string tableName = 6;
}

message KeyMigrationReq {
  optional Key key = 1;
  optional bytes value = 2;
  optional bool isTest = 3;
}

message KeyMigrationResp {
  //  optional bytes key = 1;
  //  optional bool is_successfully_migrated = 2;
  optional bool is_successfully_migrated = 1;
}

message KeyStat {
  optional bytes key = 1;
  optional float qps = 2;
  optional float writeQps = 3;
}

message KeyStatsRequest {
  optional bool placeholder = 1;
}

message MultiKeyMigrationReq {
  repeated bytes keys = 1;
}

message MultiKeyMigrationResp {
  repeated KeyMigrationResp statuses = 1;
}

message TriggerDemotionByNumsReq {
  optional uint64 qps_in_excess = 1;
  optional uint64 num_keys_in_excess = 2;
  optional HLCTimestamp demotion_timestamp = 3;
  optional bool isTest = 4;
}

message TriggerDemotionByNumsResp {
  optional bool were_demotions_triggered = 1;
  optional uint64 qps_demoted = 2;
  optional uint64 num_keys_demoted = 3;
}

message TriggerDemotionRequest {
  optional Key key = 1;
  optional bool testLocking = 2;
  optional bool do_not_contact_crdb = 3;
}

message TriggerDemotionReply {
  repeated TriggerDemotionStatus triggerDemotionStatuses = 1;
}

message TriggerDemotionStatus {
  optional Key key = 1;
  optional bool isDemotionTriggered = 2;
}

message PromoteKeysReq {
  repeated KVVersion keys = 1;
}

message PromoteKeysResp {
  repeated KeyMigrationResp were_successfully_migrated = 1;
}

message PromoteKeysToCicadaReq {
  repeated Key keys = 1;
}

message PromoteKeysToCicadaResp {
  repeated bool successfullyPromoted = 1;
}
