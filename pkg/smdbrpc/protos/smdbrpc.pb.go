// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: smdbrpc/protos/smdbrpc.proto

package execinfrapb

/*
	package cockroach.sql.distsqlrun;
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Cmd int32

const (
	Cmd_GET  Cmd = 0
	Cmd_SCAN Cmd = 1
	Cmd_PUT  Cmd = 2
)

var Cmd_name = map[int32]string{
	0: "GET",
	1: "SCAN",
	2: "PUT",
}
var Cmd_value = map[string]int32{
	"GET":  0,
	"SCAN": 1,
	"PUT":  2,
}

func (x Cmd) Enum() *Cmd {
	p := new(Cmd)
	*p = x
	return p
}
func (x Cmd) String() string {
	return proto.EnumName(Cmd_name, int32(x))
}
func (x *Cmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Cmd_value, data, "Cmd")
	if err != nil {
		return err
	}
	*x = Cmd(value)
	return nil
}
func (Cmd) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{0}
}

type HLCTimestamp struct {
	Walltime    *int64 `protobuf:"varint,1,opt,name=walltime" json:"walltime,omitempty"`
	Logicaltime *int32 `protobuf:"varint,2,opt,name=logicaltime" json:"logicaltime,omitempty"`
}

func (m *HLCTimestamp) Reset()         { *m = HLCTimestamp{} }
func (m *HLCTimestamp) String() string { return proto.CompactTextString(m) }
func (*HLCTimestamp) ProtoMessage()    {}
func (*HLCTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{0}
}
func (m *HLCTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HLCTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *HLCTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HLCTimestamp.Merge(dst, src)
}
func (m *HLCTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *HLCTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_HLCTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_HLCTimestamp proto.InternalMessageInfo

type KVPair struct {
	Key         []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value       []byte `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Walltime    *int64 `protobuf:"varint,3,opt,name=walltime" json:"walltime,omitempty"`
	Logicaltime *int32 `protobuf:"varint,4,opt,name=logicaltime" json:"logicaltime,omitempty"`
	IsZero      []byte `protobuf:"bytes,5,opt,name=isZero" json:"isZero,omitempty"`
}

func (m *KVPair) Reset()         { *m = KVPair{} }
func (m *KVPair) String() string { return proto.CompactTextString(m) }
func (*KVPair) ProtoMessage()    {}
func (*KVPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{1}
}
func (m *KVPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *KVPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVPair.Merge(dst, src)
}
func (m *KVPair) XXX_Size() int {
	return m.Size()
}
func (m *KVPair) XXX_DiscardUnknown() {
	xxx_messageInfo_KVPair.DiscardUnknown(m)
}

var xxx_messageInfo_KVPair proto.InternalMessageInfo

type BatchSendTxnsReq struct {
	Txns []*TxnReq `protobuf:"bytes,1,rep,name=txns" json:"txns,omitempty"`
}

func (m *BatchSendTxnsReq) Reset()         { *m = BatchSendTxnsReq{} }
func (m *BatchSendTxnsReq) String() string { return proto.CompactTextString(m) }
func (*BatchSendTxnsReq) ProtoMessage()    {}
func (*BatchSendTxnsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{2}
}
func (m *BatchSendTxnsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchSendTxnsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *BatchSendTxnsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSendTxnsReq.Merge(dst, src)
}
func (m *BatchSendTxnsReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchSendTxnsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSendTxnsReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSendTxnsReq proto.InternalMessageInfo

type BatchSendTxnsResp struct {
	TxnResps []*TxnResp `protobuf:"bytes,1,rep,name=txnResps" json:"txnResps,omitempty"`
}

func (m *BatchSendTxnsResp) Reset()         { *m = BatchSendTxnsResp{} }
func (m *BatchSendTxnsResp) String() string { return proto.CompactTextString(m) }
func (*BatchSendTxnsResp) ProtoMessage()    {}
func (*BatchSendTxnsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{3}
}
func (m *BatchSendTxnsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchSendTxnsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *BatchSendTxnsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSendTxnsResp.Merge(dst, src)
}
func (m *BatchSendTxnsResp) XXX_Size() int {
	return m.Size()
}
func (m *BatchSendTxnsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSendTxnsResp.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSendTxnsResp proto.InternalMessageInfo

type CRDBTxnReq struct {
	Ops       []*Op         `protobuf:"bytes,1,rep,name=ops" json:"ops,omitempty"`
	Timestamp *HLCTimestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *CRDBTxnReq) Reset()         { *m = CRDBTxnReq{} }
func (m *CRDBTxnReq) String() string { return proto.CompactTextString(m) }
func (*CRDBTxnReq) ProtoMessage()    {}
func (*CRDBTxnReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{4}
}
func (m *CRDBTxnReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CRDBTxnReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CRDBTxnReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CRDBTxnReq.Merge(dst, src)
}
func (m *CRDBTxnReq) XXX_Size() int {
	return m.Size()
}
func (m *CRDBTxnReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CRDBTxnReq.DiscardUnknown(m)
}

var xxx_messageInfo_CRDBTxnReq proto.InternalMessageInfo

type CRDBTxnResp struct {
	IsCommitted *bool     `protobuf:"varint,1,opt,name=is_committed,json=isCommitted" json:"is_committed,omitempty"`
	Responses   []*KVPair `protobuf:"bytes,2,rep,name=responses" json:"responses,omitempty"`
}

func (m *CRDBTxnResp) Reset()         { *m = CRDBTxnResp{} }
func (m *CRDBTxnResp) String() string { return proto.CompactTextString(m) }
func (*CRDBTxnResp) ProtoMessage()    {}
func (*CRDBTxnResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{5}
}
func (m *CRDBTxnResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CRDBTxnResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CRDBTxnResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CRDBTxnResp.Merge(dst, src)
}
func (m *CRDBTxnResp) XXX_Size() int {
	return m.Size()
}
func (m *CRDBTxnResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CRDBTxnResp.DiscardUnknown(m)
}

var xxx_messageInfo_CRDBTxnResp proto.InternalMessageInfo

type TestPromotionKeyReq struct {
	Key                []byte        `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	PromotionTimestamp *HLCTimestamp `protobuf:"bytes,2,opt,name=promotionTimestamp" json:"promotionTimestamp,omitempty"`
}

func (m *TestPromotionKeyReq) Reset()         { *m = TestPromotionKeyReq{} }
func (m *TestPromotionKeyReq) String() string { return proto.CompactTextString(m) }
func (*TestPromotionKeyReq) ProtoMessage()    {}
func (*TestPromotionKeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{6}
}
func (m *TestPromotionKeyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestPromotionKeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TestPromotionKeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestPromotionKeyReq.Merge(dst, src)
}
func (m *TestPromotionKeyReq) XXX_Size() int {
	return m.Size()
}
func (m *TestPromotionKeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TestPromotionKeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_TestPromotionKeyReq proto.InternalMessageInfo

type TestPromotionKeyResp struct {
	IsKeyIn *bool `protobuf:"varint,1,opt,name=isKeyIn" json:"isKeyIn,omitempty"`
}

func (m *TestPromotionKeyResp) Reset()         { *m = TestPromotionKeyResp{} }
func (m *TestPromotionKeyResp) String() string { return proto.CompactTextString(m) }
func (*TestPromotionKeyResp) ProtoMessage()    {}
func (*TestPromotionKeyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{7}
}
func (m *TestPromotionKeyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestPromotionKeyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TestPromotionKeyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestPromotionKeyResp.Merge(dst, src)
}
func (m *TestPromotionKeyResp) XXX_Size() int {
	return m.Size()
}
func (m *TestPromotionKeyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TestPromotionKeyResp.DiscardUnknown(m)
}

var xxx_messageInfo_TestPromotionKeyResp proto.InternalMessageInfo

type DeleteFromPromotionMapReq struct {
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *DeleteFromPromotionMapReq) Reset()         { *m = DeleteFromPromotionMapReq{} }
func (m *DeleteFromPromotionMapReq) String() string { return proto.CompactTextString(m) }
func (*DeleteFromPromotionMapReq) ProtoMessage()    {}
func (*DeleteFromPromotionMapReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{8}
}
func (m *DeleteFromPromotionMapReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFromPromotionMapReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DeleteFromPromotionMapReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFromPromotionMapReq.Merge(dst, src)
}
func (m *DeleteFromPromotionMapReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFromPromotionMapReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFromPromotionMapReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFromPromotionMapReq proto.InternalMessageInfo

type DeleteFromPromotionMapResp struct {
	Deleted *bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteFromPromotionMapResp) Reset()         { *m = DeleteFromPromotionMapResp{} }
func (m *DeleteFromPromotionMapResp) String() string { return proto.CompactTextString(m) }
func (*DeleteFromPromotionMapResp) ProtoMessage()    {}
func (*DeleteFromPromotionMapResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{9}
}
func (m *DeleteFromPromotionMapResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFromPromotionMapResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DeleteFromPromotionMapResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFromPromotionMapResp.Merge(dst, src)
}
func (m *DeleteFromPromotionMapResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFromPromotionMapResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFromPromotionMapResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFromPromotionMapResp proto.InternalMessageInfo

type UpdateInProgressDemotionMapReq struct {
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *UpdateInProgressDemotionMapReq) Reset()         { *m = UpdateInProgressDemotionMapReq{} }
func (m *UpdateInProgressDemotionMapReq) String() string { return proto.CompactTextString(m) }
func (*UpdateInProgressDemotionMapReq) ProtoMessage()    {}
func (*UpdateInProgressDemotionMapReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{10}
}
func (m *UpdateInProgressDemotionMapReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateInProgressDemotionMapReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *UpdateInProgressDemotionMapReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateInProgressDemotionMapReq.Merge(dst, src)
}
func (m *UpdateInProgressDemotionMapReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateInProgressDemotionMapReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateInProgressDemotionMapReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateInProgressDemotionMapReq proto.InternalMessageInfo

type UpdateInProgressDemotionMapResp struct {
	Added *bool `protobuf:"varint,1,opt,name=added" json:"added,omitempty"`
}

func (m *UpdateInProgressDemotionMapResp) Reset()         { *m = UpdateInProgressDemotionMapResp{} }
func (m *UpdateInProgressDemotionMapResp) String() string { return proto.CompactTextString(m) }
func (*UpdateInProgressDemotionMapResp) ProtoMessage()    {}
func (*UpdateInProgressDemotionMapResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{11}
}
func (m *UpdateInProgressDemotionMapResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateInProgressDemotionMapResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *UpdateInProgressDemotionMapResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateInProgressDemotionMapResp.Merge(dst, src)
}
func (m *UpdateInProgressDemotionMapResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateInProgressDemotionMapResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateInProgressDemotionMapResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateInProgressDemotionMapResp proto.InternalMessageInfo

type DeleteFromInProgressDemotionMapReq struct {
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *DeleteFromInProgressDemotionMapReq) Reset()         { *m = DeleteFromInProgressDemotionMapReq{} }
func (m *DeleteFromInProgressDemotionMapReq) String() string { return proto.CompactTextString(m) }
func (*DeleteFromInProgressDemotionMapReq) ProtoMessage()    {}
func (*DeleteFromInProgressDemotionMapReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{12}
}
func (m *DeleteFromInProgressDemotionMapReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFromInProgressDemotionMapReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DeleteFromInProgressDemotionMapReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFromInProgressDemotionMapReq.Merge(dst, src)
}
func (m *DeleteFromInProgressDemotionMapReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFromInProgressDemotionMapReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFromInProgressDemotionMapReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFromInProgressDemotionMapReq proto.InternalMessageInfo

type DeleteFromInProgressDemotionMapResp struct {
	Deleted *bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteFromInProgressDemotionMapResp) Reset()         { *m = DeleteFromInProgressDemotionMapResp{} }
func (m *DeleteFromInProgressDemotionMapResp) String() string { return proto.CompactTextString(m) }
func (*DeleteFromInProgressDemotionMapResp) ProtoMessage()    {}
func (*DeleteFromInProgressDemotionMapResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{13}
}
func (m *DeleteFromInProgressDemotionMapResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFromInProgressDemotionMapResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DeleteFromInProgressDemotionMapResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFromInProgressDemotionMapResp.Merge(dst, src)
}
func (m *DeleteFromInProgressDemotionMapResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFromInProgressDemotionMapResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFromInProgressDemotionMapResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFromInProgressDemotionMapResp proto.InternalMessageInfo

type Key struct {
	Table     *int64        `protobuf:"varint,1,opt,name=table" json:"table,omitempty"`
	Index     *int64        `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	KeyCols   []int64       `protobuf:"varint,3,rep,name=key_cols,json=keyCols" json:"key_cols,omitempty"`
	Key       []byte        `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Timestamp *HLCTimestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     []byte        `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{14}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(dst, src)
}
func (m *Key) XXX_Size() int {
	return m.Size()
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

type Op struct {
	Cmd     *Cmd    `protobuf:"varint,1,opt,name=cmd,enum=smdbrpc.Cmd" json:"cmd,omitempty"`
	Table   *int64  `protobuf:"varint,2,opt,name=table" json:"table,omitempty"`
	Index   *int64  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	KeyCols []int64 `protobuf:"varint,4,rep,name=key_cols,json=keyCols" json:"key_cols,omitempty"`
	Key     []byte  `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	Value   []byte  `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
}

func (m *Op) Reset()         { *m = Op{} }
func (m *Op) String() string { return proto.CompactTextString(m) }
func (*Op) ProtoMessage()    {}
func (*Op) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{15}
}
func (m *Op) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Op) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Op) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Op.Merge(dst, src)
}
func (m *Op) XXX_Size() int {
	return m.Size()
}
func (m *Op) XXX_DiscardUnknown() {
	xxx_messageInfo_Op.DiscardUnknown(m)
}

var xxx_messageInfo_Op proto.InternalMessageInfo

type TxnReq struct {
	Ops                []*Op         `protobuf:"bytes,1,rep,name=ops" json:"ops,omitempty"`
	Timestamp          *HLCTimestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	IsPromotion        *bool         `protobuf:"varint,3,opt,name=is_promotion,json=isPromotion" json:"is_promotion,omitempty"`
	IsTest             *bool         `protobuf:"varint,4,opt,name=is_test,json=isTest" json:"is_test,omitempty"`
	IsDemotedTestField *bool         `protobuf:"varint,5,opt,name=is_demoted_test_field,json=isDemotedTestField" json:"is_demoted_test_field,omitempty"`
	TxnId              *int32        `protobuf:"varint,6,opt,name=txn_id,json=txnId" json:"txn_id,omitempty"`
}

func (m *TxnReq) Reset()         { *m = TxnReq{} }
func (m *TxnReq) String() string { return proto.CompactTextString(m) }
func (*TxnReq) ProtoMessage()    {}
func (*TxnReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{16}
}
func (m *TxnReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxnReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TxnReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxnReq.Merge(dst, src)
}
func (m *TxnReq) XXX_Size() int {
	return m.Size()
}
func (m *TxnReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TxnReq.DiscardUnknown(m)
}

var xxx_messageInfo_TxnReq proto.InternalMessageInfo

type TxnResp struct {
	IsCommitted *bool     `protobuf:"varint,1,opt,name=is_committed,json=isCommitted" json:"is_committed,omitempty"`
	Responses   []*KVPair `protobuf:"bytes,2,rep,name=responses" json:"responses,omitempty"`
	TxnId       *int32    `protobuf:"varint,3,opt,name=txn_id,json=txnId" json:"txn_id,omitempty"`
}

func (m *TxnResp) Reset()         { *m = TxnResp{} }
func (m *TxnResp) String() string { return proto.CompactTextString(m) }
func (*TxnResp) ProtoMessage()    {}
func (*TxnResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{17}
}
func (m *TxnResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxnResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TxnResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxnResp.Merge(dst, src)
}
func (m *TxnResp) XXX_Size() int {
	return m.Size()
}
func (m *TxnResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TxnResp.DiscardUnknown(m)
}

var xxx_messageInfo_TxnResp proto.InternalMessageInfo

type CalculateCicadaReq struct {
	CpuTarget   *float64      `protobuf:"fixed64,1,opt,name=cpu_target,json=cpuTarget" json:"cpu_target,omitempty"`
	CpuCeiling  *float64      `protobuf:"fixed64,2,opt,name=cpu_ceiling,json=cpuCeiling" json:"cpu_ceiling,omitempty"`
	CpuFloor    *float64      `protobuf:"fixed64,3,opt,name=cpu_floor,json=cpuFloor" json:"cpu_floor,omitempty"`
	MemTarget   *float64      `protobuf:"fixed64,4,opt,name=mem_target,json=memTarget" json:"mem_target,omitempty"`
	MemCeiling  *float64      `protobuf:"fixed64,5,opt,name=mem_ceiling,json=memCeiling" json:"mem_ceiling,omitempty"`
	MemFloor    *float64      `protobuf:"fixed64,6,opt,name=mem_floor,json=memFloor" json:"mem_floor,omitempty"`
	PercentileN *float64      `protobuf:"fixed64,7,opt,name=percentile_n,json=percentileN" json:"percentile_n,omitempty"`
	Timestamp   *HLCTimestamp `protobuf:"bytes,8,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *CalculateCicadaReq) Reset()         { *m = CalculateCicadaReq{} }
func (m *CalculateCicadaReq) String() string { return proto.CompactTextString(m) }
func (*CalculateCicadaReq) ProtoMessage()    {}
func (*CalculateCicadaReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{18}
}
func (m *CalculateCicadaReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculateCicadaReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CalculateCicadaReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateCicadaReq.Merge(dst, src)
}
func (m *CalculateCicadaReq) XXX_Size() int {
	return m.Size()
}
func (m *CalculateCicadaReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateCicadaReq.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateCicadaReq proto.InternalMessageInfo

type CalculateCicadaStatsResp struct {
	DemotionOnly             *bool    `protobuf:"varint,1,opt,name=demotion_only,json=demotionOnly" json:"demotion_only,omitempty"`
	QpsAvailForPromotion     *uint64  `protobuf:"varint,2,opt,name=qps_avail_for_promotion,json=qpsAvailForPromotion" json:"qps_avail_for_promotion,omitempty"`
	NumKeysAvailForPromotion *uint64  `protobuf:"varint,3,opt,name=num_keys_avail_for_promotion,json=numKeysAvailForPromotion" json:"num_keys_avail_for_promotion,omitempty"`
	QpsAtNthPercentile       *float32 `protobuf:"fixed32,4,opt,name=qps_at_nth_percentile,json=qpsAtNthPercentile" json:"qps_at_nth_percentile,omitempty"`
	KeysExist                *bool    `protobuf:"varint,5,opt,name=keys_exist,json=keysExist" json:"keys_exist,omitempty"`
}

func (m *CalculateCicadaStatsResp) Reset()         { *m = CalculateCicadaStatsResp{} }
func (m *CalculateCicadaStatsResp) String() string { return proto.CompactTextString(m) }
func (*CalculateCicadaStatsResp) ProtoMessage()    {}
func (*CalculateCicadaStatsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{19}
}
func (m *CalculateCicadaStatsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculateCicadaStatsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CalculateCicadaStatsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateCicadaStatsResp.Merge(dst, src)
}
func (m *CalculateCicadaStatsResp) XXX_Size() int {
	return m.Size()
}
func (m *CalculateCicadaStatsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateCicadaStatsResp.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateCicadaStatsResp proto.InternalMessageInfo

type CicadaStatsResponse struct {
	Keystats []*KeyStat `protobuf:"bytes,1,rep,name=keystats" json:"keystats,omitempty"`
	Cpuusage *uint64    `protobuf:"varint,2,opt,name=cpuusage" json:"cpuusage,omitempty"`
	Memusage *uint64    `protobuf:"varint,3,opt,name=memusage" json:"memusage,omitempty"`
}

func (m *CicadaStatsResponse) Reset()         { *m = CicadaStatsResponse{} }
func (m *CicadaStatsResponse) String() string { return proto.CompactTextString(m) }
func (*CicadaStatsResponse) ProtoMessage()    {}
func (*CicadaStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{20}
}
func (m *CicadaStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CicadaStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CicadaStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CicadaStatsResponse.Merge(dst, src)
}
func (m *CicadaStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CicadaStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CicadaStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CicadaStatsResponse proto.InternalMessageInfo

type CRDBKeyStatsResponse struct {
	Keystats []*KeyStat `protobuf:"bytes,1,rep,name=keystats" json:"keystats,omitempty"`
}

func (m *CRDBKeyStatsResponse) Reset()         { *m = CRDBKeyStatsResponse{} }
func (m *CRDBKeyStatsResponse) String() string { return proto.CompactTextString(m) }
func (*CRDBKeyStatsResponse) ProtoMessage()    {}
func (*CRDBKeyStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{21}
}
func (m *CRDBKeyStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CRDBKeyStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CRDBKeyStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CRDBKeyStatsResponse.Merge(dst, src)
}
func (m *CRDBKeyStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CRDBKeyStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CRDBKeyStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CRDBKeyStatsResponse proto.InternalMessageInfo

type HotshardRequest struct {
	// optional string sqlstring = 1;
	Hlctimestamp *HLCTimestamp `protobuf:"bytes,1,opt,name=hlctimestamp" json:"hlctimestamp,omitempty"`
	WriteKeyset  []*KVPair     `protobuf:"bytes,2,rep,name=write_keyset,json=writeKeyset" json:"write_keyset,omitempty"`
	ReadKeyset   []uint64      `protobuf:"varint,3,rep,name=read_keyset,json=readKeyset" json:"read_keyset,omitempty"`
}

func (m *HotshardRequest) Reset()         { *m = HotshardRequest{} }
func (m *HotshardRequest) String() string { return proto.CompactTextString(m) }
func (*HotshardRequest) ProtoMessage()    {}
func (*HotshardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{22}
}
func (m *HotshardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotshardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *HotshardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotshardRequest.Merge(dst, src)
}
func (m *HotshardRequest) XXX_Size() int {
	return m.Size()
}
func (m *HotshardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HotshardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HotshardRequest proto.InternalMessageInfo

// The response message containing the greetings
type HotshardReply struct {
	IsCommitted  *bool     `protobuf:"varint,1,opt,name=is_committed,json=isCommitted" json:"is_committed,omitempty"`
	ReadValueset []*KVPair `protobuf:"bytes,2,rep,name=read_valueset,json=readValueset" json:"read_valueset,omitempty"`
}

func (m *HotshardReply) Reset()         { *m = HotshardReply{} }
func (m *HotshardReply) String() string { return proto.CompactTextString(m) }
func (*HotshardReply) ProtoMessage()    {}
func (*HotshardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{23}
}
func (m *HotshardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotshardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *HotshardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotshardReply.Merge(dst, src)
}
func (m *HotshardReply) XXX_Size() int {
	return m.Size()
}
func (m *HotshardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HotshardReply.DiscardUnknown(m)
}

var xxx_messageInfo_HotshardReply proto.InternalMessageInfo

type KVVersion struct {
	Key       []byte        `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value     []byte        `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Timestamp *HLCTimestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Hotness   *uint64       `protobuf:"varint,4,opt,name=hotness" json:"hotness,omitempty"`
}

func (m *KVVersion) Reset()         { *m = KVVersion{} }
func (m *KVVersion) String() string { return proto.CompactTextString(m) }
func (*KVVersion) ProtoMessage()    {}
func (*KVVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{24}
}
func (m *KVVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *KVVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVVersion.Merge(dst, src)
}
func (m *KVVersion) XXX_Size() int {
	return m.Size()
}
func (m *KVVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_KVVersion.DiscardUnknown(m)
}

var xxx_messageInfo_KVVersion proto.InternalMessageInfo

type KeyMigrationReq struct {
	Key    *Key   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	IsTest *bool  `protobuf:"varint,3,opt,name=isTest" json:"isTest,omitempty"`
}

func (m *KeyMigrationReq) Reset()         { *m = KeyMigrationReq{} }
func (m *KeyMigrationReq) String() string { return proto.CompactTextString(m) }
func (*KeyMigrationReq) ProtoMessage()    {}
func (*KeyMigrationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{25}
}
func (m *KeyMigrationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyMigrationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *KeyMigrationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyMigrationReq.Merge(dst, src)
}
func (m *KeyMigrationReq) XXX_Size() int {
	return m.Size()
}
func (m *KeyMigrationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyMigrationReq.DiscardUnknown(m)
}

var xxx_messageInfo_KeyMigrationReq proto.InternalMessageInfo

type KeyMigrationResp struct {
	//  optional bytes key = 1;
	//  optional bool is_successfully_migrated = 2;
	IsSuccessfullyMigrated *bool `protobuf:"varint,1,opt,name=is_successfully_migrated,json=isSuccessfullyMigrated" json:"is_successfully_migrated,omitempty"`
}

func (m *KeyMigrationResp) Reset()         { *m = KeyMigrationResp{} }
func (m *KeyMigrationResp) String() string { return proto.CompactTextString(m) }
func (*KeyMigrationResp) ProtoMessage()    {}
func (*KeyMigrationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{26}
}
func (m *KeyMigrationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyMigrationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *KeyMigrationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyMigrationResp.Merge(dst, src)
}
func (m *KeyMigrationResp) XXX_Size() int {
	return m.Size()
}
func (m *KeyMigrationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyMigrationResp.DiscardUnknown(m)
}

var xxx_messageInfo_KeyMigrationResp proto.InternalMessageInfo

type KeyStat struct {
	Key      []byte   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Qps      *float32 `protobuf:"fixed32,2,opt,name=qps" json:"qps,omitempty"`
	WriteQps *float32 `protobuf:"fixed32,3,opt,name=writeQps" json:"writeQps,omitempty"`
}

func (m *KeyStat) Reset()         { *m = KeyStat{} }
func (m *KeyStat) String() string { return proto.CompactTextString(m) }
func (*KeyStat) ProtoMessage()    {}
func (*KeyStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{27}
}
func (m *KeyStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *KeyStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyStat.Merge(dst, src)
}
func (m *KeyStat) XXX_Size() int {
	return m.Size()
}
func (m *KeyStat) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyStat.DiscardUnknown(m)
}

var xxx_messageInfo_KeyStat proto.InternalMessageInfo

type KeyStatsRequest struct {
	Placeholder *bool `protobuf:"varint,1,opt,name=placeholder" json:"placeholder,omitempty"`
}

func (m *KeyStatsRequest) Reset()         { *m = KeyStatsRequest{} }
func (m *KeyStatsRequest) String() string { return proto.CompactTextString(m) }
func (*KeyStatsRequest) ProtoMessage()    {}
func (*KeyStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{28}
}
func (m *KeyStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *KeyStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyStatsRequest.Merge(dst, src)
}
func (m *KeyStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyStatsRequest proto.InternalMessageInfo

type MultiKeyMigrationReq struct {
	Keys [][]byte `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *MultiKeyMigrationReq) Reset()         { *m = MultiKeyMigrationReq{} }
func (m *MultiKeyMigrationReq) String() string { return proto.CompactTextString(m) }
func (*MultiKeyMigrationReq) ProtoMessage()    {}
func (*MultiKeyMigrationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{29}
}
func (m *MultiKeyMigrationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiKeyMigrationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *MultiKeyMigrationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiKeyMigrationReq.Merge(dst, src)
}
func (m *MultiKeyMigrationReq) XXX_Size() int {
	return m.Size()
}
func (m *MultiKeyMigrationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiKeyMigrationReq.DiscardUnknown(m)
}

var xxx_messageInfo_MultiKeyMigrationReq proto.InternalMessageInfo

type MultiKeyMigrationResp struct {
	Statuses []*KeyMigrationResp `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty"`
}

func (m *MultiKeyMigrationResp) Reset()         { *m = MultiKeyMigrationResp{} }
func (m *MultiKeyMigrationResp) String() string { return proto.CompactTextString(m) }
func (*MultiKeyMigrationResp) ProtoMessage()    {}
func (*MultiKeyMigrationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{30}
}
func (m *MultiKeyMigrationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiKeyMigrationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *MultiKeyMigrationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiKeyMigrationResp.Merge(dst, src)
}
func (m *MultiKeyMigrationResp) XXX_Size() int {
	return m.Size()
}
func (m *MultiKeyMigrationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiKeyMigrationResp.DiscardUnknown(m)
}

var xxx_messageInfo_MultiKeyMigrationResp proto.InternalMessageInfo

type TriggerDemotionByNumsReq struct {
	QpsInExcess       *uint64       `protobuf:"varint,1,opt,name=qps_in_excess,json=qpsInExcess" json:"qps_in_excess,omitempty"`
	NumKeysInExcess   *uint64       `protobuf:"varint,2,opt,name=num_keys_in_excess,json=numKeysInExcess" json:"num_keys_in_excess,omitempty"`
	DemotionTimestamp *HLCTimestamp `protobuf:"bytes,3,opt,name=demotion_timestamp,json=demotionTimestamp" json:"demotion_timestamp,omitempty"`
	IsTest            *bool         `protobuf:"varint,4,opt,name=isTest" json:"isTest,omitempty"`
}

func (m *TriggerDemotionByNumsReq) Reset()         { *m = TriggerDemotionByNumsReq{} }
func (m *TriggerDemotionByNumsReq) String() string { return proto.CompactTextString(m) }
func (*TriggerDemotionByNumsReq) ProtoMessage()    {}
func (*TriggerDemotionByNumsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{31}
}
func (m *TriggerDemotionByNumsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerDemotionByNumsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TriggerDemotionByNumsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerDemotionByNumsReq.Merge(dst, src)
}
func (m *TriggerDemotionByNumsReq) XXX_Size() int {
	return m.Size()
}
func (m *TriggerDemotionByNumsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerDemotionByNumsReq.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerDemotionByNumsReq proto.InternalMessageInfo

type TriggerDemotionByNumsResp struct {
	WereDemotionsTriggered *bool   `protobuf:"varint,1,opt,name=were_demotions_triggered,json=wereDemotionsTriggered" json:"were_demotions_triggered,omitempty"`
	QpsDemoted             *uint64 `protobuf:"varint,2,opt,name=qps_demoted,json=qpsDemoted" json:"qps_demoted,omitempty"`
	NumKeysDemoted         *uint64 `protobuf:"varint,3,opt,name=num_keys_demoted,json=numKeysDemoted" json:"num_keys_demoted,omitempty"`
}

func (m *TriggerDemotionByNumsResp) Reset()         { *m = TriggerDemotionByNumsResp{} }
func (m *TriggerDemotionByNumsResp) String() string { return proto.CompactTextString(m) }
func (*TriggerDemotionByNumsResp) ProtoMessage()    {}
func (*TriggerDemotionByNumsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{32}
}
func (m *TriggerDemotionByNumsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerDemotionByNumsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TriggerDemotionByNumsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerDemotionByNumsResp.Merge(dst, src)
}
func (m *TriggerDemotionByNumsResp) XXX_Size() int {
	return m.Size()
}
func (m *TriggerDemotionByNumsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerDemotionByNumsResp.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerDemotionByNumsResp proto.InternalMessageInfo

type TriggerDemotionRequest struct {
	Key         *Key  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	TestLocking *bool `protobuf:"varint,2,opt,name=testLocking" json:"testLocking,omitempty"`
}

func (m *TriggerDemotionRequest) Reset()         { *m = TriggerDemotionRequest{} }
func (m *TriggerDemotionRequest) String() string { return proto.CompactTextString(m) }
func (*TriggerDemotionRequest) ProtoMessage()    {}
func (*TriggerDemotionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{33}
}
func (m *TriggerDemotionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerDemotionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TriggerDemotionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerDemotionRequest.Merge(dst, src)
}
func (m *TriggerDemotionRequest) XXX_Size() int {
	return m.Size()
}
func (m *TriggerDemotionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerDemotionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerDemotionRequest proto.InternalMessageInfo

type TriggerDemotionReply struct {
	TriggerDemotionStatuses []*TriggerDemotionStatus `protobuf:"bytes,1,rep,name=triggerDemotionStatuses" json:"triggerDemotionStatuses,omitempty"`
}

func (m *TriggerDemotionReply) Reset()         { *m = TriggerDemotionReply{} }
func (m *TriggerDemotionReply) String() string { return proto.CompactTextString(m) }
func (*TriggerDemotionReply) ProtoMessage()    {}
func (*TriggerDemotionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{34}
}
func (m *TriggerDemotionReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerDemotionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TriggerDemotionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerDemotionReply.Merge(dst, src)
}
func (m *TriggerDemotionReply) XXX_Size() int {
	return m.Size()
}
func (m *TriggerDemotionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerDemotionReply.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerDemotionReply proto.InternalMessageInfo

type TriggerDemotionStatus struct {
	Key                 *Key  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	IsDemotionTriggered *bool `protobuf:"varint,2,opt,name=isDemotionTriggered" json:"isDemotionTriggered,omitempty"`
}

func (m *TriggerDemotionStatus) Reset()         { *m = TriggerDemotionStatus{} }
func (m *TriggerDemotionStatus) String() string { return proto.CompactTextString(m) }
func (*TriggerDemotionStatus) ProtoMessage()    {}
func (*TriggerDemotionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{35}
}
func (m *TriggerDemotionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerDemotionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TriggerDemotionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerDemotionStatus.Merge(dst, src)
}
func (m *TriggerDemotionStatus) XXX_Size() int {
	return m.Size()
}
func (m *TriggerDemotionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerDemotionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerDemotionStatus proto.InternalMessageInfo

type PromoteKeysReq struct {
	Keys []*KVVersion `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *PromoteKeysReq) Reset()         { *m = PromoteKeysReq{} }
func (m *PromoteKeysReq) String() string { return proto.CompactTextString(m) }
func (*PromoteKeysReq) ProtoMessage()    {}
func (*PromoteKeysReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{36}
}
func (m *PromoteKeysReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteKeysReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *PromoteKeysReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteKeysReq.Merge(dst, src)
}
func (m *PromoteKeysReq) XXX_Size() int {
	return m.Size()
}
func (m *PromoteKeysReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteKeysReq.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteKeysReq proto.InternalMessageInfo

type PromoteKeysResp struct {
	WereSuccessfullyMigrated []*KeyMigrationResp `protobuf:"bytes,1,rep,name=were_successfully_migrated,json=wereSuccessfullyMigrated" json:"were_successfully_migrated,omitempty"`
}

func (m *PromoteKeysResp) Reset()         { *m = PromoteKeysResp{} }
func (m *PromoteKeysResp) String() string { return proto.CompactTextString(m) }
func (*PromoteKeysResp) ProtoMessage()    {}
func (*PromoteKeysResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{37}
}
func (m *PromoteKeysResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteKeysResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *PromoteKeysResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteKeysResp.Merge(dst, src)
}
func (m *PromoteKeysResp) XXX_Size() int {
	return m.Size()
}
func (m *PromoteKeysResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteKeysResp.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteKeysResp proto.InternalMessageInfo

type PromoteKeysToCicadaReq struct {
	Keys []*Key `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *PromoteKeysToCicadaReq) Reset()         { *m = PromoteKeysToCicadaReq{} }
func (m *PromoteKeysToCicadaReq) String() string { return proto.CompactTextString(m) }
func (*PromoteKeysToCicadaReq) ProtoMessage()    {}
func (*PromoteKeysToCicadaReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{38}
}
func (m *PromoteKeysToCicadaReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteKeysToCicadaReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *PromoteKeysToCicadaReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteKeysToCicadaReq.Merge(dst, src)
}
func (m *PromoteKeysToCicadaReq) XXX_Size() int {
	return m.Size()
}
func (m *PromoteKeysToCicadaReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteKeysToCicadaReq.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteKeysToCicadaReq proto.InternalMessageInfo

type PromoteKeysToCicadaResp struct {
	SuccessfullyPromoted []bool `protobuf:"varint,1,rep,name=successfullyPromoted" json:"successfullyPromoted,omitempty"`
}

func (m *PromoteKeysToCicadaResp) Reset()         { *m = PromoteKeysToCicadaResp{} }
func (m *PromoteKeysToCicadaResp) String() string { return proto.CompactTextString(m) }
func (*PromoteKeysToCicadaResp) ProtoMessage()    {}
func (*PromoteKeysToCicadaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_smdbrpc_0120e51b6991b897, []int{39}
}
func (m *PromoteKeysToCicadaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteKeysToCicadaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *PromoteKeysToCicadaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteKeysToCicadaResp.Merge(dst, src)
}
func (m *PromoteKeysToCicadaResp) XXX_Size() int {
	return m.Size()
}
func (m *PromoteKeysToCicadaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteKeysToCicadaResp.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteKeysToCicadaResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HLCTimestamp)(nil), "smdbrpc.HLCTimestamp")
	proto.RegisterType((*KVPair)(nil), "smdbrpc.KVPair")
	proto.RegisterType((*BatchSendTxnsReq)(nil), "smdbrpc.BatchSendTxnsReq")
	proto.RegisterType((*BatchSendTxnsResp)(nil), "smdbrpc.BatchSendTxnsResp")
	proto.RegisterType((*CRDBTxnReq)(nil), "smdbrpc.CRDBTxnReq")
	proto.RegisterType((*CRDBTxnResp)(nil), "smdbrpc.CRDBTxnResp")
	proto.RegisterType((*TestPromotionKeyReq)(nil), "smdbrpc.TestPromotionKeyReq")
	proto.RegisterType((*TestPromotionKeyResp)(nil), "smdbrpc.TestPromotionKeyResp")
	proto.RegisterType((*DeleteFromPromotionMapReq)(nil), "smdbrpc.DeleteFromPromotionMapReq")
	proto.RegisterType((*DeleteFromPromotionMapResp)(nil), "smdbrpc.DeleteFromPromotionMapResp")
	proto.RegisterType((*UpdateInProgressDemotionMapReq)(nil), "smdbrpc.UpdateInProgressDemotionMapReq")
	proto.RegisterType((*UpdateInProgressDemotionMapResp)(nil), "smdbrpc.UpdateInProgressDemotionMapResp")
	proto.RegisterType((*DeleteFromInProgressDemotionMapReq)(nil), "smdbrpc.DeleteFromInProgressDemotionMapReq")
	proto.RegisterType((*DeleteFromInProgressDemotionMapResp)(nil), "smdbrpc.DeleteFromInProgressDemotionMapResp")
	proto.RegisterType((*Key)(nil), "smdbrpc.Key")
	proto.RegisterType((*Op)(nil), "smdbrpc.Op")
	proto.RegisterType((*TxnReq)(nil), "smdbrpc.TxnReq")
	proto.RegisterType((*TxnResp)(nil), "smdbrpc.TxnResp")
	proto.RegisterType((*CalculateCicadaReq)(nil), "smdbrpc.CalculateCicadaReq")
	proto.RegisterType((*CalculateCicadaStatsResp)(nil), "smdbrpc.CalculateCicadaStatsResp")
	proto.RegisterType((*CicadaStatsResponse)(nil), "smdbrpc.CicadaStatsResponse")
	proto.RegisterType((*CRDBKeyStatsResponse)(nil), "smdbrpc.CRDBKeyStatsResponse")
	proto.RegisterType((*HotshardRequest)(nil), "smdbrpc.HotshardRequest")
	proto.RegisterType((*HotshardReply)(nil), "smdbrpc.HotshardReply")
	proto.RegisterType((*KVVersion)(nil), "smdbrpc.KVVersion")
	proto.RegisterType((*KeyMigrationReq)(nil), "smdbrpc.KeyMigrationReq")
	proto.RegisterType((*KeyMigrationResp)(nil), "smdbrpc.KeyMigrationResp")
	proto.RegisterType((*KeyStat)(nil), "smdbrpc.KeyStat")
	proto.RegisterType((*KeyStatsRequest)(nil), "smdbrpc.KeyStatsRequest")
	proto.RegisterType((*MultiKeyMigrationReq)(nil), "smdbrpc.MultiKeyMigrationReq")
	proto.RegisterType((*MultiKeyMigrationResp)(nil), "smdbrpc.MultiKeyMigrationResp")
	proto.RegisterType((*TriggerDemotionByNumsReq)(nil), "smdbrpc.TriggerDemotionByNumsReq")
	proto.RegisterType((*TriggerDemotionByNumsResp)(nil), "smdbrpc.TriggerDemotionByNumsResp")
	proto.RegisterType((*TriggerDemotionRequest)(nil), "smdbrpc.TriggerDemotionRequest")
	proto.RegisterType((*TriggerDemotionReply)(nil), "smdbrpc.TriggerDemotionReply")
	proto.RegisterType((*TriggerDemotionStatus)(nil), "smdbrpc.TriggerDemotionStatus")
	proto.RegisterType((*PromoteKeysReq)(nil), "smdbrpc.PromoteKeysReq")
	proto.RegisterType((*PromoteKeysResp)(nil), "smdbrpc.PromoteKeysResp")
	proto.RegisterType((*PromoteKeysToCicadaReq)(nil), "smdbrpc.PromoteKeysToCicadaReq")
	proto.RegisterType((*PromoteKeysToCicadaResp)(nil), "smdbrpc.PromoteKeysToCicadaResp")
	proto.RegisterEnum("smdbrpc.Cmd", Cmd_name, Cmd_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HotshardGatewayClient is the client API for HotshardGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HotshardGatewayClient interface {
	BatchSendTxns(ctx context.Context, in *BatchSendTxnsReq, opts ...grpc.CallOption) (*BatchSendTxnsResp, error)
	// Asks Cicada whether it will 1) only demote keys, 2) only request CRDB promotions,
	// or 3) ask CRDB to trigger demotions and promotions
	CalculateCicadaStats(ctx context.Context, in *CalculateCicadaReq, opts ...grpc.CallOption) (*CalculateCicadaStatsResp, error)
	// a txn to the hotshard
	ContactHotshard(ctx context.Context, in *HotshardRequest, opts ...grpc.CallOption) (*HotshardReply, error)
	// (singular) Demotes a key from Cicada to CRDB
	// (multiple) Demotes multiple keys from Cicada to CRDB (this essentially calls
	// DemoteKey, but the asynchronous batching is handled on Cicada's side
	DemoteKey(ctx context.Context, in *KeyMigrationReq, opts ...grpc.CallOption) (*KeyMigrationResp, error)
	DemoteKeys(ctx context.Context, in *MultiKeyMigrationReq, opts ...grpc.CallOption) (*MultiKeyMigrationResp, error)
	PromoteKey(ctx context.Context, in *KeyMigrationReq, opts ...grpc.CallOption) (*KeyMigrationResp, error)
	PromoteKeys(ctx context.Context, in *PromoteKeysReq, opts ...grpc.CallOption) (*PromoteKeysResp, error)
	PromoteKeysToCicada(ctx context.Context, in *PromoteKeysToCicadaReq, opts ...grpc.CallOption) (*PromoteKeysToCicadaResp, error)
	UpdatePromotionMap(ctx context.Context, in *PromoteKeysReq, opts ...grpc.CallOption) (*PromoteKeysResp, error)
	DeleteFromPromotionMap(ctx context.Context, in *DeleteFromPromotionMapReq, opts ...grpc.CallOption) (*DeleteFromPromotionMapResp, error)
	UpdateInProgressDemotionMap(ctx context.Context, in *UpdateInProgressDemotionMapReq, opts ...grpc.CallOption) (*UpdateInProgressDemotionMapResp, error)
	DeleteFromInProgressDemotionMap(ctx context.Context, in *DeleteFromInProgressDemotionMapReq, opts ...grpc.CallOption) (*DeleteFromInProgressDemotionMapResp, error)
	RequestCRDBKeyStats(ctx context.Context, in *KeyStatsRequest, opts ...grpc.CallOption) (HotshardGateway_RequestCRDBKeyStatsClient, error)
	SendTxn(ctx context.Context, in *TxnReq, opts ...grpc.CallOption) (*TxnResp, error)
	TriggerDemotionByNums(ctx context.Context, in *TriggerDemotionByNumsReq, opts ...grpc.CallOption) (*TriggerDemotionByNumsResp, error)
	TriggerDemotion(ctx context.Context, in *TriggerDemotionRequest, opts ...grpc.CallOption) (*TriggerDemotionReply, error)
	TestAddKeyToPromotionMap(ctx context.Context, in *TestPromotionKeyReq, opts ...grpc.CallOption) (*TestPromotionKeyResp, error)
	TestIsKeyInPromotionMap(ctx context.Context, in *TestPromotionKeyReq, opts ...grpc.CallOption) (*TestPromotionKeyResp, error)
	TestSendTxn(ctx context.Context, in *CRDBTxnReq, opts ...grpc.CallOption) (*CRDBTxnResp, error)
	RequestCicadaStats(ctx context.Context, in *CalculateCicadaReq, opts ...grpc.CallOption) (*CicadaStatsResponse, error)
}

type hotshardGatewayClient struct {
	cc *grpc.ClientConn
}

func NewHotshardGatewayClient(cc *grpc.ClientConn) HotshardGatewayClient {
	return &hotshardGatewayClient{cc}
}

func (c *hotshardGatewayClient) BatchSendTxns(ctx context.Context, in *BatchSendTxnsReq, opts ...grpc.CallOption) (*BatchSendTxnsResp, error) {
	out := new(BatchSendTxnsResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/BatchSendTxns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) CalculateCicadaStats(ctx context.Context, in *CalculateCicadaReq, opts ...grpc.CallOption) (*CalculateCicadaStatsResp, error) {
	out := new(CalculateCicadaStatsResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/CalculateCicadaStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) ContactHotshard(ctx context.Context, in *HotshardRequest, opts ...grpc.CallOption) (*HotshardReply, error) {
	out := new(HotshardReply)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/ContactHotshard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) DemoteKey(ctx context.Context, in *KeyMigrationReq, opts ...grpc.CallOption) (*KeyMigrationResp, error) {
	out := new(KeyMigrationResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/DemoteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) DemoteKeys(ctx context.Context, in *MultiKeyMigrationReq, opts ...grpc.CallOption) (*MultiKeyMigrationResp, error) {
	out := new(MultiKeyMigrationResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/DemoteKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) PromoteKey(ctx context.Context, in *KeyMigrationReq, opts ...grpc.CallOption) (*KeyMigrationResp, error) {
	out := new(KeyMigrationResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/PromoteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) PromoteKeys(ctx context.Context, in *PromoteKeysReq, opts ...grpc.CallOption) (*PromoteKeysResp, error) {
	out := new(PromoteKeysResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/PromoteKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) PromoteKeysToCicada(ctx context.Context, in *PromoteKeysToCicadaReq, opts ...grpc.CallOption) (*PromoteKeysToCicadaResp, error) {
	out := new(PromoteKeysToCicadaResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/PromoteKeysToCicada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) UpdatePromotionMap(ctx context.Context, in *PromoteKeysReq, opts ...grpc.CallOption) (*PromoteKeysResp, error) {
	out := new(PromoteKeysResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/UpdatePromotionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) DeleteFromPromotionMap(ctx context.Context, in *DeleteFromPromotionMapReq, opts ...grpc.CallOption) (*DeleteFromPromotionMapResp, error) {
	out := new(DeleteFromPromotionMapResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/DeleteFromPromotionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) UpdateInProgressDemotionMap(ctx context.Context, in *UpdateInProgressDemotionMapReq, opts ...grpc.CallOption) (*UpdateInProgressDemotionMapResp, error) {
	out := new(UpdateInProgressDemotionMapResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/UpdateInProgressDemotionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) DeleteFromInProgressDemotionMap(ctx context.Context, in *DeleteFromInProgressDemotionMapReq, opts ...grpc.CallOption) (*DeleteFromInProgressDemotionMapResp, error) {
	out := new(DeleteFromInProgressDemotionMapResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/DeleteFromInProgressDemotionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) RequestCRDBKeyStats(ctx context.Context, in *KeyStatsRequest, opts ...grpc.CallOption) (HotshardGateway_RequestCRDBKeyStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HotshardGateway_serviceDesc.Streams[0], "/smdbrpc.HotshardGateway/RequestCRDBKeyStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &hotshardGatewayRequestCRDBKeyStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HotshardGateway_RequestCRDBKeyStatsClient interface {
	Recv() (*KeyStat, error)
	grpc.ClientStream
}

type hotshardGatewayRequestCRDBKeyStatsClient struct {
	grpc.ClientStream
}

func (x *hotshardGatewayRequestCRDBKeyStatsClient) Recv() (*KeyStat, error) {
	m := new(KeyStat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hotshardGatewayClient) SendTxn(ctx context.Context, in *TxnReq, opts ...grpc.CallOption) (*TxnResp, error) {
	out := new(TxnResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/SendTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) TriggerDemotionByNums(ctx context.Context, in *TriggerDemotionByNumsReq, opts ...grpc.CallOption) (*TriggerDemotionByNumsResp, error) {
	out := new(TriggerDemotionByNumsResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/TriggerDemotionByNums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) TriggerDemotion(ctx context.Context, in *TriggerDemotionRequest, opts ...grpc.CallOption) (*TriggerDemotionReply, error) {
	out := new(TriggerDemotionReply)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/TriggerDemotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) TestAddKeyToPromotionMap(ctx context.Context, in *TestPromotionKeyReq, opts ...grpc.CallOption) (*TestPromotionKeyResp, error) {
	out := new(TestPromotionKeyResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/TestAddKeyToPromotionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) TestIsKeyInPromotionMap(ctx context.Context, in *TestPromotionKeyReq, opts ...grpc.CallOption) (*TestPromotionKeyResp, error) {
	out := new(TestPromotionKeyResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/TestIsKeyInPromotionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) TestSendTxn(ctx context.Context, in *CRDBTxnReq, opts ...grpc.CallOption) (*CRDBTxnResp, error) {
	out := new(CRDBTxnResp)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/TestSendTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotshardGatewayClient) RequestCicadaStats(ctx context.Context, in *CalculateCicadaReq, opts ...grpc.CallOption) (*CicadaStatsResponse, error) {
	out := new(CicadaStatsResponse)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/RequestCicadaStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotshardGatewayServer is the server API for HotshardGateway service.
type HotshardGatewayServer interface {
	BatchSendTxns(context.Context, *BatchSendTxnsReq) (*BatchSendTxnsResp, error)
	// Asks Cicada whether it will 1) only demote keys, 2) only request CRDB promotions,
	// or 3) ask CRDB to trigger demotions and promotions
	CalculateCicadaStats(context.Context, *CalculateCicadaReq) (*CalculateCicadaStatsResp, error)
	// a txn to the hotshard
	ContactHotshard(context.Context, *HotshardRequest) (*HotshardReply, error)
	// (singular) Demotes a key from Cicada to CRDB
	// (multiple) Demotes multiple keys from Cicada to CRDB (this essentially calls
	// DemoteKey, but the asynchronous batching is handled on Cicada's side
	DemoteKey(context.Context, *KeyMigrationReq) (*KeyMigrationResp, error)
	DemoteKeys(context.Context, *MultiKeyMigrationReq) (*MultiKeyMigrationResp, error)
	PromoteKey(context.Context, *KeyMigrationReq) (*KeyMigrationResp, error)
	PromoteKeys(context.Context, *PromoteKeysReq) (*PromoteKeysResp, error)
	PromoteKeysToCicada(context.Context, *PromoteKeysToCicadaReq) (*PromoteKeysToCicadaResp, error)
	UpdatePromotionMap(context.Context, *PromoteKeysReq) (*PromoteKeysResp, error)
	DeleteFromPromotionMap(context.Context, *DeleteFromPromotionMapReq) (*DeleteFromPromotionMapResp, error)
	UpdateInProgressDemotionMap(context.Context, *UpdateInProgressDemotionMapReq) (*UpdateInProgressDemotionMapResp, error)
	DeleteFromInProgressDemotionMap(context.Context, *DeleteFromInProgressDemotionMapReq) (*DeleteFromInProgressDemotionMapResp, error)
	RequestCRDBKeyStats(*KeyStatsRequest, HotshardGateway_RequestCRDBKeyStatsServer) error
	SendTxn(context.Context, *TxnReq) (*TxnResp, error)
	TriggerDemotionByNums(context.Context, *TriggerDemotionByNumsReq) (*TriggerDemotionByNumsResp, error)
	TriggerDemotion(context.Context, *TriggerDemotionRequest) (*TriggerDemotionReply, error)
	TestAddKeyToPromotionMap(context.Context, *TestPromotionKeyReq) (*TestPromotionKeyResp, error)
	TestIsKeyInPromotionMap(context.Context, *TestPromotionKeyReq) (*TestPromotionKeyResp, error)
	TestSendTxn(context.Context, *CRDBTxnReq) (*CRDBTxnResp, error)
	RequestCicadaStats(context.Context, *CalculateCicadaReq) (*CicadaStatsResponse, error)
}

func RegisterHotshardGatewayServer(s *grpc.Server, srv HotshardGatewayServer) {
	s.RegisterService(&_HotshardGateway_serviceDesc, srv)
}

func _HotshardGateway_BatchSendTxns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSendTxnsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).BatchSendTxns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/BatchSendTxns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).BatchSendTxns(ctx, req.(*BatchSendTxnsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_CalculateCicadaStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCicadaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).CalculateCicadaStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/CalculateCicadaStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).CalculateCicadaStats(ctx, req.(*CalculateCicadaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_ContactHotshard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotshardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).ContactHotshard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/ContactHotshard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).ContactHotshard(ctx, req.(*HotshardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_DemoteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyMigrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).DemoteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/DemoteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).DemoteKey(ctx, req.(*KeyMigrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_DemoteKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiKeyMigrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).DemoteKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/DemoteKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).DemoteKeys(ctx, req.(*MultiKeyMigrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_PromoteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyMigrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).PromoteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/PromoteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).PromoteKey(ctx, req.(*KeyMigrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_PromoteKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).PromoteKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/PromoteKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).PromoteKeys(ctx, req.(*PromoteKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_PromoteKeysToCicada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteKeysToCicadaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).PromoteKeysToCicada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/PromoteKeysToCicada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).PromoteKeysToCicada(ctx, req.(*PromoteKeysToCicadaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_UpdatePromotionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).UpdatePromotionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/UpdatePromotionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).UpdatePromotionMap(ctx, req.(*PromoteKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_DeleteFromPromotionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromPromotionMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).DeleteFromPromotionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/DeleteFromPromotionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).DeleteFromPromotionMap(ctx, req.(*DeleteFromPromotionMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_UpdateInProgressDemotionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInProgressDemotionMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).UpdateInProgressDemotionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/UpdateInProgressDemotionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).UpdateInProgressDemotionMap(ctx, req.(*UpdateInProgressDemotionMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_DeleteFromInProgressDemotionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromInProgressDemotionMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).DeleteFromInProgressDemotionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/DeleteFromInProgressDemotionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).DeleteFromInProgressDemotionMap(ctx, req.(*DeleteFromInProgressDemotionMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_RequestCRDBKeyStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeyStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HotshardGatewayServer).RequestCRDBKeyStats(m, &hotshardGatewayRequestCRDBKeyStatsServer{stream})
}

type HotshardGateway_RequestCRDBKeyStatsServer interface {
	Send(*KeyStat) error
	grpc.ServerStream
}

type hotshardGatewayRequestCRDBKeyStatsServer struct {
	grpc.ServerStream
}

func (x *hotshardGatewayRequestCRDBKeyStatsServer) Send(m *KeyStat) error {
	return x.ServerStream.SendMsg(m)
}

func _HotshardGateway_SendTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).SendTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/SendTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).SendTxn(ctx, req.(*TxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_TriggerDemotionByNums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerDemotionByNumsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).TriggerDemotionByNums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/TriggerDemotionByNums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).TriggerDemotionByNums(ctx, req.(*TriggerDemotionByNumsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_TriggerDemotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerDemotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).TriggerDemotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/TriggerDemotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).TriggerDemotion(ctx, req.(*TriggerDemotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_TestAddKeyToPromotionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestPromotionKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).TestAddKeyToPromotionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/TestAddKeyToPromotionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).TestAddKeyToPromotionMap(ctx, req.(*TestPromotionKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_TestIsKeyInPromotionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestPromotionKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).TestIsKeyInPromotionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/TestIsKeyInPromotionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).TestIsKeyInPromotionMap(ctx, req.(*TestPromotionKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_TestSendTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRDBTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).TestSendTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/TestSendTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).TestSendTxn(ctx, req.(*CRDBTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotshardGateway_RequestCicadaStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCicadaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).RequestCicadaStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/RequestCicadaStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).RequestCicadaStats(ctx, req.(*CalculateCicadaReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HotshardGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smdbrpc.HotshardGateway",
	HandlerType: (*HotshardGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchSendTxns",
			Handler:    _HotshardGateway_BatchSendTxns_Handler,
		},
		{
			MethodName: "CalculateCicadaStats",
			Handler:    _HotshardGateway_CalculateCicadaStats_Handler,
		},
		{
			MethodName: "ContactHotshard",
			Handler:    _HotshardGateway_ContactHotshard_Handler,
		},
		{
			MethodName: "DemoteKey",
			Handler:    _HotshardGateway_DemoteKey_Handler,
		},
		{
			MethodName: "DemoteKeys",
			Handler:    _HotshardGateway_DemoteKeys_Handler,
		},
		{
			MethodName: "PromoteKey",
			Handler:    _HotshardGateway_PromoteKey_Handler,
		},
		{
			MethodName: "PromoteKeys",
			Handler:    _HotshardGateway_PromoteKeys_Handler,
		},
		{
			MethodName: "PromoteKeysToCicada",
			Handler:    _HotshardGateway_PromoteKeysToCicada_Handler,
		},
		{
			MethodName: "UpdatePromotionMap",
			Handler:    _HotshardGateway_UpdatePromotionMap_Handler,
		},
		{
			MethodName: "DeleteFromPromotionMap",
			Handler:    _HotshardGateway_DeleteFromPromotionMap_Handler,
		},
		{
			MethodName: "UpdateInProgressDemotionMap",
			Handler:    _HotshardGateway_UpdateInProgressDemotionMap_Handler,
		},
		{
			MethodName: "DeleteFromInProgressDemotionMap",
			Handler:    _HotshardGateway_DeleteFromInProgressDemotionMap_Handler,
		},
		{
			MethodName: "SendTxn",
			Handler:    _HotshardGateway_SendTxn_Handler,
		},
		{
			MethodName: "TriggerDemotionByNums",
			Handler:    _HotshardGateway_TriggerDemotionByNums_Handler,
		},
		{
			MethodName: "TriggerDemotion",
			Handler:    _HotshardGateway_TriggerDemotion_Handler,
		},
		{
			MethodName: "TestAddKeyToPromotionMap",
			Handler:    _HotshardGateway_TestAddKeyToPromotionMap_Handler,
		},
		{
			MethodName: "TestIsKeyInPromotionMap",
			Handler:    _HotshardGateway_TestIsKeyInPromotionMap_Handler,
		},
		{
			MethodName: "TestSendTxn",
			Handler:    _HotshardGateway_TestSendTxn_Handler,
		},
		{
			MethodName: "RequestCicadaStats",
			Handler:    _HotshardGateway_RequestCicadaStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestCRDBKeyStats",
			Handler:       _HotshardGateway_RequestCRDBKeyStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "smdbrpc/protos/smdbrpc.proto",
}

func (m *HLCTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HLCTimestamp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Walltime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Walltime))
	}
	if m.Logicaltime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Logicaltime))
	}
	return i, nil
}

func (m *KVPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVPair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Walltime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Walltime))
	}
	if m.Logicaltime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Logicaltime))
	}
	if m.IsZero != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.IsZero)))
		i += copy(dAtA[i:], m.IsZero)
	}
	return i, nil
}

func (m *BatchSendTxnsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchSendTxnsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txns) > 0 {
		for _, msg := range m.Txns {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BatchSendTxnsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchSendTxnsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TxnResps) > 0 {
		for _, msg := range m.TxnResps {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CRDBTxnReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CRDBTxnReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, msg := range m.Ops {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Timestamp.Size()))
		n1, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CRDBTxnResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CRDBTxnResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsCommitted != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsCommitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestPromotionKeyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestPromotionKeyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.PromotionTimestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.PromotionTimestamp.Size()))
		n2, err := m.PromotionTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *TestPromotionKeyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestPromotionKeyResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsKeyIn != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsKeyIn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeleteFromPromotionMapReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFromPromotionMapReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(*m.Key)))
		i += copy(dAtA[i:], *m.Key)
	}
	return i, nil
}

func (m *DeleteFromPromotionMapResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFromPromotionMapResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Deleted != nil {
		dAtA[i] = 0x8
		i++
		if *m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateInProgressDemotionMapReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInProgressDemotionMapReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(*m.Key)))
		i += copy(dAtA[i:], *m.Key)
	}
	return i, nil
}

func (m *UpdateInProgressDemotionMapResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInProgressDemotionMapResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Added != nil {
		dAtA[i] = 0x8
		i++
		if *m.Added {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeleteFromInProgressDemotionMapReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFromInProgressDemotionMapReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(*m.Key)))
		i += copy(dAtA[i:], *m.Key)
	}
	return i, nil
}

func (m *DeleteFromInProgressDemotionMapResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFromInProgressDemotionMapResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Deleted != nil {
		dAtA[i] = 0x8
		i++
		if *m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Table != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Table))
	}
	if m.Index != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Index))
	}
	if len(m.KeyCols) > 0 {
		for _, num := range m.KeyCols {
			dAtA[i] = 0x18
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(num))
		}
	}
	if m.Key != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Timestamp.Size()))
		n3, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Value != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Op) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Op) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cmd != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Cmd))
	}
	if m.Table != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Table))
	}
	if m.Index != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Index))
	}
	if len(m.KeyCols) > 0 {
		for _, num := range m.KeyCols {
			dAtA[i] = 0x20
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(num))
		}
	}
	if m.Key != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Value != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *TxnReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxnReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, msg := range m.Ops {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Timestamp.Size()))
		n4, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.IsPromotion != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsPromotion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsTest != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsTest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsDemotedTestField != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsDemotedTestField {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TxnId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.TxnId))
	}
	return i, nil
}

func (m *TxnResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxnResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsCommitted != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsCommitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TxnId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.TxnId))
	}
	return i, nil
}

func (m *CalculateCicadaReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateCicadaReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CpuTarget != nil {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.CpuTarget))))
		i += 8
	}
	if m.CpuCeiling != nil {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.CpuCeiling))))
		i += 8
	}
	if m.CpuFloor != nil {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.CpuFloor))))
		i += 8
	}
	if m.MemTarget != nil {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MemTarget))))
		i += 8
	}
	if m.MemCeiling != nil {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MemCeiling))))
		i += 8
	}
	if m.MemFloor != nil {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MemFloor))))
		i += 8
	}
	if m.PercentileN != nil {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PercentileN))))
		i += 8
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Timestamp.Size()))
		n5, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *CalculateCicadaStatsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateCicadaStatsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DemotionOnly != nil {
		dAtA[i] = 0x8
		i++
		if *m.DemotionOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.QpsAvailForPromotion != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.QpsAvailForPromotion))
	}
	if m.NumKeysAvailForPromotion != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.NumKeysAvailForPromotion))
	}
	if m.QpsAtNthPercentile != nil {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.QpsAtNthPercentile))))
		i += 4
	}
	if m.KeysExist != nil {
		dAtA[i] = 0x28
		i++
		if *m.KeysExist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CicadaStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CicadaStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keystats) > 0 {
		for _, msg := range m.Keystats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Cpuusage != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Cpuusage))
	}
	if m.Memusage != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Memusage))
	}
	return i, nil
}

func (m *CRDBKeyStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CRDBKeyStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keystats) > 0 {
		for _, msg := range m.Keystats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HotshardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotshardRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hlctimestamp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Hlctimestamp.Size()))
		n6, err := m.Hlctimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.WriteKeyset) > 0 {
		for _, msg := range m.WriteKeyset {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ReadKeyset) > 0 {
		for _, num := range m.ReadKeyset {
			dAtA[i] = 0x18
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *HotshardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotshardReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsCommitted != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsCommitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ReadValueset) > 0 {
		for _, msg := range m.ReadValueset {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KVVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVVersion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Timestamp.Size()))
		n7, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Hotness != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.Hotness))
	}
	return i, nil
}

func (m *KeyMigrationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyMigrationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Key.Size()))
		n8, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.IsTest != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsTest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *KeyMigrationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyMigrationResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsSuccessfullyMigrated != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsSuccessfullyMigrated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *KeyStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyStat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Qps != nil {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Qps))))
		i += 4
	}
	if m.WriteQps != nil {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.WriteQps))))
		i += 4
	}
	return i, nil
}

func (m *KeyStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Placeholder != nil {
		dAtA[i] = 0x8
		i++
		if *m.Placeholder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MultiKeyMigrationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiKeyMigrationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *MultiKeyMigrationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiKeyMigrationResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for _, msg := range m.Statuses {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TriggerDemotionByNumsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerDemotionByNumsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QpsInExcess != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.QpsInExcess))
	}
	if m.NumKeysInExcess != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.NumKeysInExcess))
	}
	if m.DemotionTimestamp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.DemotionTimestamp.Size()))
		n9, err := m.DemotionTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.IsTest != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsTest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TriggerDemotionByNumsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerDemotionByNumsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WereDemotionsTriggered != nil {
		dAtA[i] = 0x8
		i++
		if *m.WereDemotionsTriggered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.QpsDemoted != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.QpsDemoted))
	}
	if m.NumKeysDemoted != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(*m.NumKeysDemoted))
	}
	return i, nil
}

func (m *TriggerDemotionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerDemotionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Key.Size()))
		n10, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.TestLocking != nil {
		dAtA[i] = 0x10
		i++
		if *m.TestLocking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TriggerDemotionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerDemotionReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TriggerDemotionStatuses) > 0 {
		for _, msg := range m.TriggerDemotionStatuses {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TriggerDemotionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerDemotionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSmdbrpc(dAtA, i, uint64(m.Key.Size()))
		n11, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.IsDemotionTriggered != nil {
		dAtA[i] = 0x10
		i++
		if *m.IsDemotionTriggered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PromoteKeysReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteKeysReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PromoteKeysResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteKeysResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WereSuccessfullyMigrated) > 0 {
		for _, msg := range m.WereSuccessfullyMigrated {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PromoteKeysToCicadaReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteKeysToCicadaReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSmdbrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PromoteKeysToCicadaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteKeysToCicadaResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SuccessfullyPromoted) > 0 {
		for _, b := range m.SuccessfullyPromoted {
			dAtA[i] = 0x8
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func encodeVarintSmdbrpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HLCTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Walltime != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Walltime))
	}
	if m.Logicaltime != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Logicaltime))
	}
	return n
}

func (m *KVPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Walltime != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Walltime))
	}
	if m.Logicaltime != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Logicaltime))
	}
	if m.IsZero != nil {
		l = len(m.IsZero)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func (m *BatchSendTxnsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txns) > 0 {
		for _, e := range m.Txns {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *BatchSendTxnsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxnResps) > 0 {
		for _, e := range m.TxnResps {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *CRDBTxnReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func (m *CRDBTxnResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsCommitted != nil {
		n += 2
	}
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *TestPromotionKeyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.PromotionTimestamp != nil {
		l = m.PromotionTimestamp.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func (m *TestPromotionKeyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsKeyIn != nil {
		n += 2
	}
	return n
}

func (m *DeleteFromPromotionMapReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func (m *DeleteFromPromotionMapResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deleted != nil {
		n += 2
	}
	return n
}

func (m *UpdateInProgressDemotionMapReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func (m *UpdateInProgressDemotionMapResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Added != nil {
		n += 2
	}
	return n
}

func (m *DeleteFromInProgressDemotionMapReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func (m *DeleteFromInProgressDemotionMapResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deleted != nil {
		n += 2
	}
	return n
}

func (m *Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Table != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Table))
	}
	if m.Index != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Index))
	}
	if len(m.KeyCols) > 0 {
		for _, e := range m.KeyCols {
			n += 1 + sovSmdbrpc(uint64(e))
		}
	}
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func (m *Op) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Cmd))
	}
	if m.Table != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Table))
	}
	if m.Index != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Index))
	}
	if len(m.KeyCols) > 0 {
		for _, e := range m.KeyCols {
			n += 1 + sovSmdbrpc(uint64(e))
		}
	}
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func (m *TxnReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.IsPromotion != nil {
		n += 2
	}
	if m.IsTest != nil {
		n += 2
	}
	if m.IsDemotedTestField != nil {
		n += 2
	}
	if m.TxnId != nil {
		n += 1 + sovSmdbrpc(uint64(*m.TxnId))
	}
	return n
}

func (m *TxnResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsCommitted != nil {
		n += 2
	}
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	if m.TxnId != nil {
		n += 1 + sovSmdbrpc(uint64(*m.TxnId))
	}
	return n
}

func (m *CalculateCicadaReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuTarget != nil {
		n += 9
	}
	if m.CpuCeiling != nil {
		n += 9
	}
	if m.CpuFloor != nil {
		n += 9
	}
	if m.MemTarget != nil {
		n += 9
	}
	if m.MemCeiling != nil {
		n += 9
	}
	if m.MemFloor != nil {
		n += 9
	}
	if m.PercentileN != nil {
		n += 9
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	return n
}

func (m *CalculateCicadaStatsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DemotionOnly != nil {
		n += 2
	}
	if m.QpsAvailForPromotion != nil {
		n += 1 + sovSmdbrpc(uint64(*m.QpsAvailForPromotion))
	}
	if m.NumKeysAvailForPromotion != nil {
		n += 1 + sovSmdbrpc(uint64(*m.NumKeysAvailForPromotion))
	}
	if m.QpsAtNthPercentile != nil {
		n += 5
	}
	if m.KeysExist != nil {
		n += 2
	}
	return n
}

func (m *CicadaStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keystats) > 0 {
		for _, e := range m.Keystats {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	if m.Cpuusage != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Cpuusage))
	}
	if m.Memusage != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Memusage))
	}
	return n
}

func (m *CRDBKeyStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keystats) > 0 {
		for _, e := range m.Keystats {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *HotshardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hlctimestamp != nil {
		l = m.Hlctimestamp.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if len(m.WriteKeyset) > 0 {
		for _, e := range m.WriteKeyset {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	if len(m.ReadKeyset) > 0 {
		for _, e := range m.ReadKeyset {
			n += 1 + sovSmdbrpc(uint64(e))
		}
	}
	return n
}

func (m *HotshardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsCommitted != nil {
		n += 2
	}
	if len(m.ReadValueset) > 0 {
		for _, e := range m.ReadValueset {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *KVVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Hotness != nil {
		n += 1 + sovSmdbrpc(uint64(*m.Hotness))
	}
	return n
}

func (m *KeyMigrationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.IsTest != nil {
		n += 2
	}
	return n
}

func (m *KeyMigrationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccessfullyMigrated != nil {
		n += 2
	}
	return n
}

func (m *KeyStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.Qps != nil {
		n += 5
	}
	if m.WriteQps != nil {
		n += 5
	}
	return n
}

func (m *KeyStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Placeholder != nil {
		n += 2
	}
	return n
}

func (m *MultiKeyMigrationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *MultiKeyMigrationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *TriggerDemotionByNumsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QpsInExcess != nil {
		n += 1 + sovSmdbrpc(uint64(*m.QpsInExcess))
	}
	if m.NumKeysInExcess != nil {
		n += 1 + sovSmdbrpc(uint64(*m.NumKeysInExcess))
	}
	if m.DemotionTimestamp != nil {
		l = m.DemotionTimestamp.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.IsTest != nil {
		n += 2
	}
	return n
}

func (m *TriggerDemotionByNumsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WereDemotionsTriggered != nil {
		n += 2
	}
	if m.QpsDemoted != nil {
		n += 1 + sovSmdbrpc(uint64(*m.QpsDemoted))
	}
	if m.NumKeysDemoted != nil {
		n += 1 + sovSmdbrpc(uint64(*m.NumKeysDemoted))
	}
	return n
}

func (m *TriggerDemotionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.TestLocking != nil {
		n += 2
	}
	return n
}

func (m *TriggerDemotionReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TriggerDemotionStatuses) > 0 {
		for _, e := range m.TriggerDemotionStatuses {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *TriggerDemotionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovSmdbrpc(uint64(l))
	}
	if m.IsDemotionTriggered != nil {
		n += 2
	}
	return n
}

func (m *PromoteKeysReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *PromoteKeysResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WereSuccessfullyMigrated) > 0 {
		for _, e := range m.WereSuccessfullyMigrated {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *PromoteKeysToCicadaReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovSmdbrpc(uint64(l))
		}
	}
	return n
}

func (m *PromoteKeysToCicadaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuccessfullyPromoted) > 0 {
		n += 2 * len(m.SuccessfullyPromoted)
	}
	return n
}

func sovSmdbrpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSmdbrpc(x uint64) (n int) {
	return sovSmdbrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HLCTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HLCTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HLCTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Walltime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Walltime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logicaltime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Logicaltime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Walltime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Walltime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logicaltime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Logicaltime = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsZero", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsZero = append(m.IsZero[:0], dAtA[iNdEx:postIndex]...)
			if m.IsZero == nil {
				m.IsZero = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchSendTxnsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchSendTxnsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchSendTxnsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txns = append(m.Txns, &TxnReq{})
			if err := m.Txns[len(m.Txns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchSendTxnsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchSendTxnsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchSendTxnsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnResps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxnResps = append(m.TxnResps, &TxnResp{})
			if err := m.TxnResps[len(m.TxnResps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CRDBTxnReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CRDBTxnReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CRDBTxnReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, &Op{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &HLCTimestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CRDBTxnResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CRDBTxnResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CRDBTxnResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCommitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCommitted = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &KVPair{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestPromotionKeyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestPromotionKeyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestPromotionKeyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PromotionTimestamp == nil {
				m.PromotionTimestamp = &HLCTimestamp{}
			}
			if err := m.PromotionTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestPromotionKeyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestPromotionKeyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestPromotionKeyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKeyIn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsKeyIn = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFromPromotionMapReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFromPromotionMapReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFromPromotionMapReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFromPromotionMapResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFromPromotionMapResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFromPromotionMapResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Deleted = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInProgressDemotionMapReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInProgressDemotionMapReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInProgressDemotionMapReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInProgressDemotionMapResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInProgressDemotionMapResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInProgressDemotionMapResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Added", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Added = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFromInProgressDemotionMapReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFromInProgressDemotionMapReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFromInProgressDemotionMapReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFromInProgressDemotionMapResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFromInProgressDemotionMapResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFromInProgressDemotionMapResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Deleted = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Table = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSmdbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyCols = append(m.KeyCols, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSmdbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSmdbrpc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeyCols) == 0 {
					m.KeyCols = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSmdbrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyCols = append(m.KeyCols, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyCols", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &HLCTimestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Op) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Op: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Op: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var v Cmd
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Cmd(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cmd = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Table = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSmdbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyCols = append(m.KeyCols, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSmdbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSmdbrpc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeyCols) == 0 {
					m.KeyCols = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSmdbrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyCols = append(m.KeyCols, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyCols", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxnReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxnReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxnReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, &Op{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &HLCTimestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPromotion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPromotion = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTest = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDemotedTestField", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDemotedTestField = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxnId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxnResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxnResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxnResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCommitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCommitted = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &KVPair{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxnId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateCicadaReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateCicadaReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateCicadaReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuTarget", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.CpuTarget = &v2
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCeiling", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.CpuCeiling = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuFloor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.CpuFloor = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemTarget", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MemTarget = &v2
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemCeiling", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MemCeiling = &v2
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemFloor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MemFloor = &v2
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentileN", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PercentileN = &v2
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &HLCTimestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateCicadaStatsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateCicadaStatsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateCicadaStatsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DemotionOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DemotionOnly = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QpsAvailForPromotion", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QpsAvailForPromotion = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumKeysAvailForPromotion", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumKeysAvailForPromotion = &v
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field QpsAtNthPercentile", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.QpsAtNthPercentile = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysExist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.KeysExist = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CicadaStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CicadaStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CicadaStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keystats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keystats = append(m.Keystats, &KeyStat{})
			if err := m.Keystats[len(m.Keystats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpuusage", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cpuusage = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memusage", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Memusage = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CRDBKeyStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CRDBKeyStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CRDBKeyStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keystats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keystats = append(m.Keystats, &KeyStat{})
			if err := m.Keystats[len(m.Keystats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotshardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotshardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotshardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hlctimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hlctimestamp == nil {
				m.Hlctimestamp = &HLCTimestamp{}
			}
			if err := m.Hlctimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteKeyset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriteKeyset = append(m.WriteKeyset, &KVPair{})
			if err := m.WriteKeyset[len(m.WriteKeyset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSmdbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReadKeyset = append(m.ReadKeyset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSmdbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSmdbrpc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReadKeyset) == 0 {
					m.ReadKeyset = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSmdbrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReadKeyset = append(m.ReadKeyset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadKeyset", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotshardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotshardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotshardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCommitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCommitted = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadValueset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadValueset = append(m.ReadValueset, &KVPair{})
			if err := m.ReadValueset[len(m.ReadValueset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &HLCTimestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotness", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hotness = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyMigrationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyMigrationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyMigrationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTest = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyMigrationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyMigrationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyMigrationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccessfullyMigrated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSuccessfullyMigrated = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qps", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Qps = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteQps", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.WriteQps = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Placeholder = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiKeyMigrationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiKeyMigrationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiKeyMigrationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiKeyMigrationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiKeyMigrationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiKeyMigrationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &KeyMigrationResp{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerDemotionByNumsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerDemotionByNumsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerDemotionByNumsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QpsInExcess", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QpsInExcess = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumKeysInExcess", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumKeysInExcess = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DemotionTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DemotionTimestamp == nil {
				m.DemotionTimestamp = &HLCTimestamp{}
			}
			if err := m.DemotionTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTest = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerDemotionByNumsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerDemotionByNumsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerDemotionByNumsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WereDemotionsTriggered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WereDemotionsTriggered = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QpsDemoted", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QpsDemoted = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumKeysDemoted", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumKeysDemoted = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerDemotionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerDemotionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerDemotionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestLocking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TestLocking = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerDemotionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerDemotionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerDemotionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerDemotionStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggerDemotionStatuses = append(m.TriggerDemotionStatuses, &TriggerDemotionStatus{})
			if err := m.TriggerDemotionStatuses[len(m.TriggerDemotionStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerDemotionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerDemotionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerDemotionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDemotionTriggered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDemotionTriggered = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteKeysReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteKeysReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteKeysReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &KVVersion{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteKeysResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteKeysResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteKeysResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WereSuccessfullyMigrated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WereSuccessfullyMigrated = append(m.WereSuccessfullyMigrated, &KeyMigrationResp{})
			if err := m.WereSuccessfullyMigrated[len(m.WereSuccessfullyMigrated)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteKeysToCicadaReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteKeysToCicadaReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteKeysToCicadaReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &Key{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteKeysToCicadaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteKeysToCicadaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteKeysToCicadaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSmdbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SuccessfullyPromoted = append(m.SuccessfullyPromoted, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSmdbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSmdbrpc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.SuccessfullyPromoted) == 0 {
					m.SuccessfullyPromoted = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSmdbrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SuccessfullyPromoted = append(m.SuccessfullyPromoted, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessfullyPromoted", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSmdbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSmdbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSmdbrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSmdbrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSmdbrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSmdbrpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSmdbrpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSmdbrpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSmdbrpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSmdbrpc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("smdbrpc/protos/smdbrpc.proto", fileDescriptor_smdbrpc_0120e51b6991b897)
}

var fileDescriptor_smdbrpc_0120e51b6991b897 = []byte{
	// 1978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xe7, 0x72, 0x29, 0x89, 0x7a, 0xa4, 0x2c, 0x65, 0xf4, 0x45, 0xaf, 0x6d, 0x5a, 0x1e, 0x03,
	0xad, 0x90, 0xc4, 0x8e, 0xa3, 0x34, 0x1f, 0xcd, 0xa1, 0x85, 0x45, 0xc9, 0xb1, 0x20, 0x4b, 0x56,
	0x56, 0x8c, 0x9b, 0xfa, 0xb2, 0x59, 0xef, 0x8e, 0xa4, 0xad, 0xf6, 0x8b, 0x3b, 0xc3, 0x98, 0x44,
	0x81, 0x1e, 0x7a, 0x28, 0x8a, 0x9e, 0x0a, 0xf4, 0x1f, 0x68, 0x2f, 0x05, 0xfa, 0x9f, 0xa4, 0xb7,
	0x1c, 0x73, 0x6c, 0xe5, 0x7f, 0xa4, 0x98, 0x99, 0xfd, 0x24, 0x97, 0x14, 0x6b, 0x24, 0xb7, 0x9d,
	0x79, 0xbf, 0xf7, 0x31, 0x6f, 0x7e, 0xef, 0xcd, 0xec, 0xc0, 0x6d, 0xea, 0xd9, 0xaf, 0xa2, 0xd0,
	0xfa, 0x20, 0x8c, 0x02, 0x16, 0xd0, 0x0f, 0xe2, 0xe1, 0x43, 0x31, 0x44, 0x0b, 0xf1, 0x10, 0x3f,
	0x83, 0xe6, 0xd3, 0x67, 0x9d, 0xae, 0xe3, 0x11, 0xca, 0x4c, 0x2f, 0x44, 0x1a, 0xd4, 0x5f, 0x9b,
	0xae, 0xcb, 0x1c, 0x8f, 0xb4, 0x94, 0x2d, 0x65, 0x5b, 0xd5, 0xd3, 0x31, 0xda, 0x82, 0x86, 0x1b,
	0x9c, 0x3b, 0x96, 0x29, 0xc5, 0xd5, 0x2d, 0x65, 0x7b, 0x4e, 0xcf, 0x4f, 0xe1, 0x3f, 0x29, 0x30,
	0x7f, 0xf8, 0xe2, 0xc4, 0x74, 0x22, 0xb4, 0x02, 0xea, 0x25, 0x19, 0x0a, 0x1b, 0x4d, 0x9d, 0x7f,
	0xa2, 0x35, 0x98, 0xfb, 0xd6, 0x74, 0xfb, 0x52, 0xb1, 0xa9, 0xcb, 0x41, 0xc1, 0xa1, 0x3a, 0xdd,
	0x61, 0x6d, 0xcc, 0x21, 0xda, 0x80, 0x79, 0x87, 0xbe, 0x24, 0x51, 0xd0, 0x9a, 0x13, 0x46, 0xe3,
	0x11, 0xfe, 0x14, 0x56, 0x76, 0x4d, 0x66, 0x5d, 0x9c, 0x12, 0xdf, 0xee, 0x0e, 0x7c, 0xaa, 0x93,
	0x1e, 0xba, 0x0f, 0x35, 0x36, 0xf0, 0x69, 0x4b, 0xd9, 0x52, 0xb7, 0x1b, 0x3b, 0xcb, 0x0f, 0x93,
	0x8c, 0x74, 0x07, 0xbe, 0x4e, 0x7a, 0xba, 0x10, 0xe2, 0xc7, 0xf0, 0xce, 0x88, 0x22, 0x0d, 0xd1,
	0xfb, 0x50, 0x67, 0x1c, 0x44, 0xc3, 0x44, 0x7b, 0xa5, 0xa8, 0x4d, 0x43, 0x3d, 0x45, 0xe0, 0x6f,
	0x00, 0x3a, 0xfa, 0xde, 0xae, 0x34, 0x8b, 0xee, 0x80, 0x1a, 0xa4, 0x6a, 0x8d, 0x54, 0xed, 0x79,
	0xa8, 0xf3, 0x79, 0xf4, 0x11, 0x2c, 0xb2, 0x24, 0xf9, 0x22, 0x31, 0x8d, 0x9d, 0xf5, 0x14, 0x94,
	0xdf, 0x19, 0x3d, 0xc3, 0x61, 0x03, 0x1a, 0xa9, 0x07, 0x1a, 0xa2, 0x7b, 0xd0, 0x74, 0xa8, 0x61,
	0x05, 0x9e, 0xe7, 0x30, 0x46, 0x6c, 0x91, 0xf3, 0xba, 0xde, 0x70, 0x68, 0x27, 0x99, 0x42, 0x0f,
	0x60, 0x31, 0x22, 0x34, 0x0c, 0x7c, 0x4a, 0x68, 0xab, 0x3a, 0x92, 0x00, 0xb9, 0x63, 0x7a, 0x86,
	0xc0, 0x3e, 0xac, 0x76, 0x09, 0x65, 0x27, 0x51, 0xe0, 0x05, 0xcc, 0x09, 0xfc, 0x43, 0x32, 0xe4,
	0x6b, 0x19, 0xdf, 0xd3, 0x7d, 0x40, 0x61, 0x02, 0xea, 0xce, 0xb6, 0x8e, 0x12, 0x05, 0xfc, 0x08,
	0xd6, 0xc6, 0xfd, 0xd1, 0x10, 0xb5, 0x60, 0xc1, 0xa1, 0x87, 0x64, 0x78, 0xe0, 0xc7, 0x8b, 0x4a,
	0x86, 0xf8, 0x01, 0xdc, 0xdc, 0x23, 0x2e, 0x61, 0xe4, 0x49, 0x14, 0x78, 0xa9, 0xde, 0x91, 0x19,
	0x8e, 0xc4, 0xb9, 0x28, 0xe2, 0xc4, 0x9f, 0x80, 0x36, 0x09, 0x2e, 0xdd, 0xd8, 0x42, 0x9a, 0xe4,
	0x2e, 0x19, 0xe2, 0x1d, 0x68, 0x7f, 0x15, 0xda, 0x26, 0x23, 0x07, 0xfe, 0x49, 0x14, 0x9c, 0x47,
	0x84, 0xd2, 0x3d, 0x72, 0x8d, 0xaf, 0x4f, 0xe1, 0xee, 0x54, 0x1d, 0x1a, 0xf2, 0x52, 0x30, 0x6d,
	0x3b, 0x75, 0x27, 0x07, 0xf8, 0x13, 0xc0, 0x59, 0x90, 0xff, 0x87, 0xc3, 0x5f, 0xc3, 0xfd, 0x6b,
	0xf5, 0xa6, 0xae, 0xf2, 0x5f, 0x0a, 0xa8, 0x87, 0xb2, 0x42, 0x99, 0xf9, 0xca, 0x4d, 0x2a, 0x5f,
	0x0e, 0xf8, 0xac, 0xe3, 0xdb, 0x64, 0x20, 0xb6, 0x55, 0xd5, 0xe5, 0x00, 0xdd, 0x84, 0xfa, 0x25,
	0x19, 0x1a, 0x56, 0xe0, 0xd2, 0x96, 0xba, 0xa5, 0x6e, 0xab, 0xfa, 0xc2, 0x25, 0x19, 0x76, 0x02,
	0x97, 0x26, 0x11, 0xd6, 0x32, 0x9a, 0x14, 0x58, 0x3e, 0x37, 0x1b, 0xcb, 0xb3, 0x7e, 0x31, 0x9f,
	0xeb, 0x17, 0xf8, 0x6f, 0x0a, 0x54, 0x9f, 0x87, 0xa8, 0x0d, 0xaa, 0xe5, 0xc9, 0x85, 0xdc, 0xd8,
	0x69, 0xa6, 0xb6, 0x3a, 0x9e, 0xad, 0x73, 0x41, 0xb6, 0x94, 0x6a, 0xe9, 0x52, 0xd4, 0x49, 0x4b,
	0xa9, 0x95, 0x2e, 0x65, 0xae, 0xa4, 0x8b, 0x15, 0xa2, 0xba, 0x52, 0x60, 0xfe, 0xa7, 0x2b, 0xf8,
	0xb8, 0xc2, 0xd3, 0xc2, 0x11, 0xe1, 0x8b, 0x0a, 0x4f, 0xa9, 0x8c, 0x36, 0x79, 0xa9, 0x18, 0x8c,
	0x50, 0x26, 0x12, 0x5f, 0xe7, 0xad, 0x90, 0xd7, 0x14, 0xfa, 0x10, 0xd6, 0x1d, 0x6a, 0xd8, 0x9c,
	0x0c, 0xc4, 0x16, 0x00, 0xe3, 0xcc, 0x21, 0xae, 0x2d, 0x16, 0x55, 0xd7, 0x91, 0x23, 0x89, 0x42,
	0x6c, 0x8e, 0x7e, 0xc2, 0x25, 0x68, 0x1d, 0xe6, 0xd9, 0xc0, 0x37, 0x1c, 0x5b, 0x2c, 0x72, 0x4e,
	0x9f, 0x63, 0x03, 0xff, 0xc0, 0xc6, 0x11, 0x2c, 0xfc, 0x64, 0x2d, 0x27, 0xe7, 0x53, 0xcd, 0xfb,
	0xfc, 0x67, 0x15, 0x50, 0xc7, 0x74, 0xad, 0xbe, 0x6b, 0x32, 0xd2, 0x71, 0x2c, 0xd3, 0x36, 0x65,
	0x92, 0xc1, 0x0a, 0xfb, 0x06, 0x33, 0xa3, 0x73, 0xc2, 0x84, 0x77, 0x45, 0x5f, 0xb4, 0xc2, 0x7e,
	0x57, 0x4c, 0xa0, 0xbb, 0xd0, 0xe0, 0x62, 0x8b, 0x38, 0xae, 0xe3, 0x9f, 0x8b, 0x34, 0x2b, 0x3a,
	0xd7, 0xe8, 0xc8, 0x19, 0x74, 0x0b, 0x38, 0xda, 0x38, 0x73, 0x83, 0x20, 0x12, 0x0e, 0x15, 0xbd,
	0x6e, 0x85, 0xfd, 0x27, 0x7c, 0xcc, 0x8d, 0x7b, 0xc4, 0x4b, 0x8c, 0xd7, 0xa4, 0x71, 0x8f, 0x78,
	0x99, 0x71, 0x2e, 0x4e, 0x8c, 0xcf, 0x49, 0xe3, 0x1e, 0xf1, 0x72, 0xc6, 0x39, 0x40, 0x1a, 0x9f,
	0x97, 0xc6, 0x3d, 0xe2, 0x49, 0xe3, 0xf7, 0xa0, 0x19, 0x92, 0xc8, 0x22, 0x3e, 0x73, 0x5c, 0x62,
	0xf8, 0xad, 0x05, 0x21, 0x6f, 0x64, 0x73, 0xc7, 0x45, 0x8a, 0xd4, 0x67, 0x3c, 0x13, 0xfe, 0x5c,
	0x85, 0xd6, 0x48, 0xa2, 0x4e, 0x99, 0xc9, 0xe4, 0x01, 0x76, 0x1f, 0x96, 0xec, 0xb8, 0x1b, 0x18,
	0x81, 0xef, 0x0e, 0xe3, 0xfd, 0x6a, 0x26, 0x93, 0xcf, 0x7d, 0x77, 0x88, 0x3e, 0x86, 0xcd, 0x5e,
	0x48, 0x0d, 0xf3, 0x5b, 0xd3, 0x71, 0x8d, 0xb3, 0x20, 0xca, 0xf1, 0x8d, 0x27, 0xb0, 0xa6, 0xaf,
	0xf5, 0x42, 0xfa, 0x98, 0x4b, 0x9f, 0x04, 0x51, 0x46, 0xbc, 0x5f, 0xc1, 0x6d, 0xbf, 0xef, 0x19,
	0x97, 0x64, 0x58, 0xae, 0xab, 0x0a, 0xdd, 0x96, 0xdf, 0xf7, 0x0e, 0xc9, 0xb0, 0x44, 0xff, 0x43,
	0x58, 0x17, 0x6e, 0x99, 0xe1, 0xb3, 0x0b, 0x23, 0xcb, 0x83, 0x48, 0x7c, 0x55, 0x47, 0xdc, 0x29,
	0x3b, 0x66, 0x17, 0x27, 0xa9, 0x84, 0x6f, 0x90, 0x70, 0x47, 0x06, 0x0e, 0x65, 0x31, 0x8f, 0x17,
	0xf9, 0xcc, 0x3e, 0x9f, 0xc0, 0xbf, 0x87, 0xd5, 0x91, 0x04, 0x70, 0x8a, 0xf1, 0x53, 0x9c, 0x63,
	0xf8, 0xdc, 0xd8, 0x29, 0x7e, 0x48, 0x86, 0x1c, 0xac, 0xa7, 0x08, 0x7e, 0x2f, 0xb1, 0xc2, 0x7e,
	0x9f, 0x9a, 0xe7, 0x24, 0x5e, 0x7e, 0x3a, 0xe6, 0x32, 0x8f, 0x78, 0x52, 0x26, 0x97, 0x97, 0x8e,
	0xf1, 0x1e, 0xac, 0xf1, 0xb3, 0x39, 0x36, 0xf8, 0x96, 0xde, 0xf1, 0x3f, 0x14, 0x58, 0x7e, 0x1a,
	0x30, 0x7a, 0x61, 0x46, 0xb6, 0x4e, 0x7a, 0x7d, 0x5e, 0xc8, 0xbf, 0x84, 0xe6, 0x85, 0x6b, 0x65,
	0xcc, 0x50, 0xa6, 0x31, 0xa3, 0x00, 0x45, 0x3b, 0xd0, 0x7c, 0x1d, 0x39, 0x8c, 0x88, 0x5d, 0x22,
	0x6c, 0x52, 0x39, 0x36, 0x04, 0xe8, 0x50, 0x60, 0x38, 0xcd, 0x23, 0x62, 0xda, 0x89, 0x0a, 0xef,
	0xf1, 0x35, 0x1d, 0xf8, 0x94, 0x04, 0xe0, 0x0b, 0x58, 0xca, 0x42, 0x0c, 0xdd, 0xe1, 0x2c, 0x4d,
	0xe1, 0x17, 0xb0, 0x24, 0x8c, 0x8a, 0xae, 0x39, 0x25, 0x92, 0x26, 0x47, 0xbd, 0x88, 0x41, 0xf8,
	0x8f, 0x0a, 0x2c, 0x1e, 0xbe, 0x78, 0x41, 0x22, 0xca, 0x09, 0x33, 0xeb, 0xcd, 0xb2, 0x50, 0x46,
	0xea, 0x8c, 0x9d, 0xb6, 0x05, 0x0b, 0x17, 0x01, 0xf3, 0x09, 0xa5, 0x82, 0x7f, 0x35, 0x3d, 0x19,
	0x62, 0x03, 0x96, 0x0f, 0xc9, 0xf0, 0xc8, 0x39, 0x8f, 0x4c, 0xce, 0x5b, 0xde, 0x85, 0xda, 0x59,
	0x24, 0x8d, 0xdc, 0x21, 0xc4, 0x6f, 0x2f, 0x53, 0xe2, 0x12, 0x77, 0x56, 0xde, 0x6c, 0xe3, 0x36,
	0x1e, 0x8f, 0xf0, 0x33, 0x58, 0x29, 0x3a, 0xa0, 0x21, 0xfa, 0x0c, 0x5a, 0x0e, 0x35, 0x68, 0xdf,
	0xb2, 0x08, 0xa5, 0x67, 0x7d, 0xd7, 0x1d, 0x1a, 0x9e, 0x00, 0xa4, 0xe9, 0xdd, 0x70, 0xe8, 0x69,
	0x4e, 0x7c, 0x14, 0x4b, 0xf1, 0x01, 0x2c, 0xc4, 0xb4, 0x2a, 0x49, 0xd8, 0x0a, 0xa8, 0xbd, 0x90,
	0x8a, 0xb0, 0xaa, 0x3a, 0xff, 0x14, 0xd7, 0x70, 0xbe, 0xf9, 0x5f, 0x86, 0x54, 0x84, 0x55, 0xd5,
	0xd3, 0x31, 0xfe, 0x48, 0xac, 0x3c, 0xa6, 0xb3, 0xe4, 0xe2, 0x16, 0x34, 0x42, 0xd7, 0xb4, 0xc8,
	0x45, 0xe0, 0xda, 0x24, 0x4a, 0x76, 0x3a, 0x37, 0x85, 0xdf, 0x85, 0xb5, 0xa3, 0xbe, 0xcb, 0x9c,
	0xd1, 0x9c, 0x21, 0xa8, 0x71, 0x46, 0x89, 0x1a, 0x68, 0xea, 0xe2, 0x1b, 0x1f, 0xc3, 0x7a, 0x09,
	0x96, 0x86, 0xe8, 0x63, 0xa8, 0xf3, 0x7a, 0xe8, 0xf3, 0x23, 0x44, 0x16, 0xcd, 0xcd, 0x7c, 0x96,
	0x0b, 0x60, 0x3d, 0x85, 0xe2, 0x7f, 0x2b, 0xd0, 0xea, 0x46, 0xce, 0xf9, 0x39, 0x89, 0x92, 0x4b,
	0xd0, 0xee, 0xf0, 0xb8, 0xef, 0x89, 0xdf, 0x00, 0x0c, 0x4b, 0xbc, 0xdf, 0x38, 0xbe, 0x41, 0x06,
	0x3c, 0x6d, 0x22, 0xf8, 0x9a, 0xde, 0xe8, 0x85, 0xf4, 0xc0, 0xdf, 0x17, 0x53, 0xe8, 0x3d, 0x40,
	0x69, 0x4f, 0xcb, 0x80, 0xb2, 0x0d, 0x2c, 0xc7, 0x9d, 0x2c, 0x05, 0xef, 0x01, 0x4a, 0x9b, 0xeb,
	0x8c, 0x84, 0x7b, 0x27, 0x51, 0xc8, 0x7e, 0xbc, 0x32, 0x56, 0x14, 0x8e, 0x6f, 0xfc, 0x77, 0x05,
	0x6e, 0x4e, 0x58, 0x8b, 0xe4, 0xc7, 0x6b, 0x12, 0x11, 0x23, 0xb1, 0x47, 0x0d, 0x26, 0xb1, 0x19,
	0x3f, 0xb8, 0x3c, 0xd1, 0xa4, 0xdd, 0x44, 0xca, 0xcb, 0x9b, 0xa7, 0x21, 0xbe, 0x17, 0xc4, 0x6b,
	0x83, 0x5e, 0x98, 0xdc, 0x06, 0xd0, 0x36, 0xac, 0xa4, 0x39, 0x48, 0x50, 0xb2, 0xd9, 0xdd, 0x88,
	0x33, 0x10, 0x23, 0xf1, 0x4b, 0xd8, 0x18, 0x89, 0x30, 0xa1, 0xc9, 0x75, 0x05, 0xb2, 0x05, 0x0d,
	0x7e, 0x21, 0x79, 0x16, 0x58, 0x97, 0xc9, 0x39, 0x5d, 0xd7, 0xf3, 0x53, 0x38, 0x84, 0xb5, 0x31,
	0xdb, 0xbc, 0xd7, 0x7c, 0x0d, 0x9b, 0xac, 0x38, 0x7f, 0x5a, 0x24, 0x4a, 0x3b, 0xfb, 0x43, 0x2b,
	0xc3, 0xe9, 0x93, 0xd4, 0xb1, 0x03, 0xeb, 0xa5, 0x1a, 0xd7, 0x2e, 0xe6, 0x11, 0xac, 0x3a, 0xe9,
	0xa5, 0x3b, 0x4d, 0x74, 0xbc, 0xa8, 0x32, 0x11, 0xfe, 0x0c, 0x6e, 0xc8, 0x73, 0x50, 0xf4, 0x5c,
	0x4e, 0xce, 0x9f, 0xe5, 0xaa, 0xa3, 0xb1, 0x83, 0x72, 0x6d, 0x31, 0xee, 0x7e, 0x71, 0xc5, 0xfc,
	0x0e, 0x96, 0x0b, 0x9a, 0x34, 0x44, 0xbf, 0x01, 0x4d, 0x50, 0x61, 0x52, 0xb3, 0xb8, 0xa6, 0x7a,
	0x04, 0x8f, 0x4a, 0x3b, 0xc9, 0xe7, 0xb0, 0x91, 0xf3, 0xd5, 0x0d, 0xb2, 0x5b, 0xd8, 0x56, 0x21,
	0xda, 0x62, 0x4a, 0x64, 0x9c, 0x47, 0xb0, 0x59, 0xaa, 0x4b, 0xf9, 0x99, 0xb4, 0x96, 0x0f, 0x35,
	0x86, 0xc9, 0x48, 0xeb, 0x7a, 0xa9, 0xec, 0xdd, 0x7b, 0xa0, 0x76, 0x3c, 0x1b, 0x2d, 0x80, 0xfa,
	0xc5, 0x7e, 0x77, 0xa5, 0x82, 0xea, 0x50, 0x3b, 0xed, 0x3c, 0x3e, 0x5e, 0x51, 0xf8, 0xd4, 0xc9,
	0x57, 0xdd, 0x95, 0xea, 0xce, 0x5f, 0x96, 0xb2, 0x93, 0xf3, 0x0b, 0x93, 0x91, 0xd7, 0xe6, 0x10,
	0x3d, 0x85, 0xa5, 0xc2, 0x4f, 0x3d, 0xca, 0xf2, 0x30, 0xfa, 0x4a, 0xa0, 0x69, 0x93, 0x44, 0x34,
	0xc4, 0x15, 0xf4, 0x35, 0xac, 0x95, 0x5d, 0xb2, 0xd0, 0xad, 0xec, 0x0f, 0x64, 0xec, 0xb2, 0xaa,
	0xdd, 0x9b, 0x24, 0x4c, 0x6f, 0x08, 0xb8, 0x82, 0xf6, 0x61, 0xb9, 0x13, 0xf8, 0xcc, 0xb4, 0x58,
	0x12, 0x3d, 0x6a, 0x65, 0xcd, 0xa3, 0x78, 0x15, 0xd0, 0x36, 0x4a, 0x24, 0xa1, 0x3b, 0xc4, 0x15,
	0xb4, 0x0b, 0x8b, 0xb2, 0x2c, 0xf9, 0xff, 0x5c, 0x6b, 0xc2, 0x76, 0xf7, 0xb4, 0xc9, 0x44, 0xc0,
	0x15, 0x74, 0x04, 0x90, 0xda, 0xa0, 0xe8, 0x4e, 0x0a, 0x2d, 0xeb, 0xe7, 0x5a, 0x7b, 0x9a, 0x58,
	0x98, 0xeb, 0x00, 0x64, 0x1c, 0x78, 0xdb, 0x98, 0x76, 0xa1, 0x91, 0x23, 0x12, 0xda, 0x4c, 0xb1,
	0xc5, 0x02, 0xd2, 0x5a, 0xe5, 0x02, 0x61, 0xe3, 0x25, 0xac, 0x96, 0x90, 0x11, 0xdd, 0x2d, 0x53,
	0xc9, 0xd1, 0x5c, 0xdb, 0x9a, 0x0e, 0x10, 0xb6, 0x0f, 0x00, 0xc9, 0x9f, 0xfe, 0xfc, 0xe3, 0xc2,
	0xdb, 0x85, 0x69, 0xc1, 0x46, 0xf9, 0x5b, 0x05, 0xc2, 0xa9, 0xd6, 0xc4, 0xb7, 0x0f, 0xed, 0xfe,
	0xb5, 0x18, 0xe1, 0x24, 0x82, 0x5b, 0x53, 0x1e, 0x29, 0xd0, 0xcf, 0x53, 0x2b, 0xd3, 0x9f, 0x3f,
	0xb4, 0xed, 0xd9, 0x80, 0xc2, 0xe7, 0x1f, 0xe0, 0xee, 0x35, 0xef, 0x14, 0xe8, 0xbd, 0x92, 0xe8,
	0x27, 0xfa, 0x7e, 0x7f, 0x76, 0x70, 0x5c, 0x62, 0xab, 0x71, 0x01, 0xe5, 0x6f, 0xe8, 0x45, 0x46,
	0xe6, 0x6f, 0x39, 0xda, 0xd8, 0x0d, 0x1d, 0x57, 0x1e, 0x29, 0xe8, 0x21, 0x2c, 0xc4, 0x5d, 0x01,
	0x8d, 0x3e, 0x22, 0x6a, 0x63, 0xef, 0x82, 0xb8, 0x82, 0xbe, 0x19, 0x3b, 0x50, 0xe4, 0x01, 0x8e,
	0xee, 0x4d, 0x3a, 0xa2, 0xd2, 0xcb, 0x8a, 0x86, 0xaf, 0x83, 0x08, 0x0f, 0xa7, 0xb0, 0x3c, 0x22,
	0xce, 0x91, 0xba, 0xfc, 0x68, 0xd6, 0xee, 0x4c, 0x06, 0xc8, 0x4e, 0xf2, 0x5b, 0x68, 0xf1, 0x0b,
	0xc8, 0x63, 0x9b, 0xdf, 0xf7, 0xbb, 0x41, 0x81, 0x88, 0xb7, 0x33, 0xe5, 0xf1, 0x67, 0xc2, 0xbc,
	0xe9, 0x92, 0x47, 0x3d, 0xd1, 0x45, 0x37, 0xb9, 0xe4, 0x40, 0xbe, 0xe5, 0xfd, 0x98, 0x96, 0x3f,
	0x87, 0x06, 0x97, 0x24, 0xfb, 0xb3, 0x9a, 0x75, 0xde, 0xf4, 0x45, 0x56, 0x5b, 0x1b, 0x9f, 0x14,
	0xba, 0x5f, 0x02, 0x4a, 0xe8, 0x31, 0x6b, 0x67, 0xcf, 0xa2, 0x2d, 0xf9, 0xe1, 0xc4, 0x95, 0xdd,
	0x07, 0xdf, 0xfd, 0xb7, 0x5d, 0xf9, 0xee, 0xaa, 0xad, 0x7c, 0x7f, 0xd5, 0x56, 0x7e, 0xb8, 0x6a,
	0x2b, 0xff, 0xb9, 0x6a, 0x2b, 0x7f, 0x7d, 0xd3, 0xae, 0x7c, 0xff, 0xa6, 0x5d, 0xf9, 0xe1, 0x4d,
	0xbb, 0xf2, 0xb2, 0x41, 0x06, 0xc4, 0x72, 0xfc, 0xb3, 0xc8, 0x0c, 0x5f, 0xfd, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0x2c, 0xb3, 0xd1, 0x58, 0xb4, 0x17, 0x00, 0x00,
}
